model <- blockmodels::BM_bernoulli(data_asv_mat, membership_type = "LBM", verbosity=0, plotting="")
#model <- blockmodels::BM_bernoulli(data_asv_mat, membership_type = "LBM", exploration_direction = c(10,10), exploration_factor = 10, explore_min = 1, explore_max = 100)
model$estimate()
# the best model
b <- which.max(model$ICL)
memb_host <- as.data.frame(model$memberships[[b]]$Z1)
memb_asv <- as.data.frame(model$memberships[[b]]$Z2)
# attaching hosts and ASVs IDs
host_names <- rownames(data_asv_mat)
asv_names <- colnames(data_asv_mat)
memb_host %<>% mutate(host_group = max.col(.,'first')) %>% mutate(host_ID = as.numeric(host_names))
memb_asv %<>% mutate(asv_group = max.col(.,'first')) %>% mutate(asv_ID = asv_names)
# matching host group to ASV group
data_asv %<>% left_join(memb_host %>% dplyr::select(host_ID,host_group), by = "host_ID") %>%
left_join(memb_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID")
#write_csv(data_asv, "data_processed/three_villages/data_asv_0.01_rattus_mandena_groups.csv")
cat("## Hosts", '\n')
print(knitr::kable(head(memb_host)))
cat('\n','\n')
cat("## ASVs", '\n')
print(knitr::kable(head(memb_asv)))
cat('\n','\n')
cat("## Plot", '\n')
print(model$memberships[[b]]$plot())
cat('\n','\n')
hosts <- data_asv %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::NMI(hosts$grid, hosts$host_group)
nmi_shuff <- vector(length = 1000)
for(i in 1:1000) {
# shuffling the grid attribute
hosts_shuff <- hosts %>%
mutate(grid = sample(grid,nrow(hosts)))
# calculating nmi
nmi_shuff[i] <- aricode::NMI(hosts_shuff$grid, hosts_shuff$host_group)
}
# plotting
p <- length(nmi_shuff[nmi_shuff>nmi_obs]) / length(nmi_shuff)
g <- as.data.frame(nmi_shuff) %>%
ggplot(aes(nmi_shuff)) +
geom_histogram() +
theme_bw() +
geom_vline(xintercept = nmi_obs, linetype='dashed', color="red") +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20)) +
labs(x="NMI", y="No. of Shuffled Networks")+
annotate("text", x=max(nmi_shuff), y=100, label=paste('p-value =',p))
ggsave("nmi_host_grid.pdf", path = "LBM_analysis_new_files", device = "pdf")
print(g)
cat('\n','\n')
ggsave("nmi_host_grid.pdf", path = "LBM_analysis_new_files", device = "pdf")
print(g)
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png'), out.width = '100%', out.height='40%')
library(tidyverse)
library(magrittr)
library(ggplot2)
library(vegan)
library(igraph)
library(reshape2)
library(infomapecology)
library(aricode)
rm(list=ls())
# reading ASV data
data_asv <- read_csv("data_processed/three_villages/data_asv_0.01_grids2.csv")
data_asv %<>% filter((host_species == "Rattus rattus" | host_species == "Microgale brevicaudata") & village == "Mandena") %>%
mutate(grid = factor(grid, levels = c("semi-intact_forest","secondary_forest","brushy_regrowth","agriculture","flooded_rice","agroforest","village")))
n_asv <- data_asv %>%
count(asv_ID) %>%
filter(n<3)
#
#data_asv %<>% filter(asv_ID %in% n_asv$asv_ID)
#data_asv_mat <- data_asv %>%
#  spread(asv_ID, reads, fill = 0) %>%
#  mutate(across(starts_with("ASV"), ~.*unfiltered_reads)) %>%
#  mutate(total_reads = select(.,starts_with("ASV")) %>% rowSums(na.rm = TRUE)) %>%
#  mutate(across(starts_with("ASV"), ~./total_reads)) %>%
#  gather("asv_ID", "reads", starts_with("ASV")) %>%
#  filter(reads>0)
#data_mammals <- read_csv("data_raw/Terrestrial_Mammals.csv")
#data_mammals %<>% mutate(host_ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", animal_id))) %>%
#  mutate(dist_village = as.numeric(gsub(".*?([0-9,.]+).*", "\\1", dist_village_center))) %>%
#  select(host_ID, dist_village)
#full_grids <- read_csv("data_processed/three_villages/data_SM.csv") %>% dplyr::select(host_ID, grid) %>%
#  left_join(data_mammals, by="host_ID")
#data_asv %<>% dplyr::select(-grid) %>%left_join(full_grids, by="host_ID") %>%
#  mutate(dist_village = ifelse(grid=="village",0,dist_village))
#write_csv(data_asv_mat, "data_processed/three_villages/data_asv_0.01_grids2.csv")
# distance between grids
grid_dist_avg <- data_asv %>%
distinct(host_ID, grid, dist_village) %>%
group_by(grid) %>%
summarise(distance = mean(dist_village))
data_asv_mat <- data_asv %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
s="Rattus rattus"
data_asv_s <- data_asv %>% filter(host_species==s)
data_asv_mat <- data_asv_s %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
# building the network
network_object <- infomapecology::create_monolayer_object(data_asv_mat, directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_asv <- infomap_object$modules %>% filter(node_group == "ASV")%>% dplyr::rename(asv_group = module_level1, asv_ID = node_name)
modules_host <- infomap_object$modules %>% filter(node_group == "Host")%>% dplyr::rename(host_group = module_level1, host_ID = node_name) %>% mutate(host_ID = as.numeric(host_ID))
data_asv_s %<>% left_join(modules_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID") %>%
left_join(modules_host %>% dplyr::select(host_ID,host_group), by = "host_ID")
View(data_asv_s)
View(modules_asv)
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n= n_distinct(grid))
View(n_module_grid)
n_asv <- data_asv_s %>%
count(asv_ID)
View(n_asv)
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n_grid = n_distinct(grid))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,.))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,n))
n_asv %>%
ggplot(aes(x=as.factor(n), y=n_grid, fill=as.factor(n))) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="Host Species", y="Microbiome Similarity [Jaccard]")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = as.factor(n, levels = c("1-4","5-9","10+")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = factor(n, levels = c("1-4","5-9","10+")))
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Degree", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png','pdf'), out.width = '100%', out.height='40%')
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
library(tidyverse)
library(magrittr)
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
View(data_asv)
#BiocManager::install("dada2")
library(tidyverse)
library(dada2)
library(DECIPHER)
setwd("~/GitHub/Microbiome_Structure_Madagascar")
# reading the fasta file
fasta_file <- read.FASTA(file="data/data_raw/data_microbiome/ASV_merged_full.fa")
library(ape)
library(adegenet)
library(phangorn)
# reading the fasta file
fasta_file <- read.FASTA(file="data/data_raw/data_microbiome/ASV_merged_full.fa")
?assignTaxonomy
new_taxa = assignTaxonomy("data/data_raw/data_microbiome/ASV_merged_full.fa",
"Macintosh HD/Users/matan/Research/gut_parasites/silva_nr99_v138.1_wSpecies_train_set.fa.gz",
verbose=T, minBoot=80, outputBootstraps = T)
new_taxa = assignTaxonomy("data/data_raw/data_microbiome/ASV_merged_full.fa",
"~/Research/gut_parasites/silva_nr99_v138.1_wSpecies_train_set.fa.gz",
verbose=T, minBoot=80, outputBootstraps = T)
# check the structure
str(new_taxa)
# number of asvs
n_asvs = dim(new_taxa[[1]])
new_ids = t(as.data.frame(new_taxa[[1]][1,1:7])) # check that there are 7 taxonomic slots
# loop through (this is not the most efficient way to do things, but it only takes a minute)
for(i in 2:n_asvs){
temp = t(as.data.frame(new_taxa[[1]][i,1:7]))
new_ids= rbind(new_ids, temp)
}
dim(new_ids)
new_ids = as.data.frame(new_ids)
names(rownames(new_taxa$tax))
# double check names
new_ids$ASV = names(rownames(new_taxa$tax))
View(new_ids)
# write out the file
write.table(new_ids, "data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv", sep = "\t", quote=F, col.names=NA)
### Repeat this procedure for the boot scores
### Boot values
n_asvs = dim(new_taxa[[2]])
new_ids = t(as.data.frame(new_taxa[[2]][1,1:7]))
for(i in 2:n_asvs){
temp = t(as.data.frame(new_taxa[[2]][i,1:7]))
new_ids= rbind(new_ids, temp)
}
dim(new_ids)
str(new_ids)
new_ids = as.data.frame(new_ids)
new_ids$ASV = names(rownames(new_taxa$tax))
View(new_ids)
write.table(new_ids, "data/data_raw/data_microbiome/ASVs_taxonomy_new_boot.tsv", sep = "\t", quote=F, col.names=NA)
knitr::opts_chunk$set(results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png'), out.width = '100%', out.height='60%')
data_asv <- read_csv("../data/data_processed/microbiome/data_asv_rra0.01_th1000.csv") %>%
filter(host_species == "Rattus rattus")
# microbes taxonomy
tax <- read_delim("../data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv") %>%
rename(asv_ID = ASV)
View(new_ids)
tax <- read_delim("../data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv")
View(tax)
# microbes taxonomy
tax <- read_delim("../data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv") %>%
rename(asv_ID = ASV)
# microbes taxonomy
tax <- read_delim("../data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv") %>%
rename( ASV=asv_ID)
head(tax)
?rename
# microbes taxonomy
tax <- read_delim("../data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv") %>%
dplyr::rename(asv_ID = ASV)
View(tax)
tax_cyn=tax %>% filter(Phylum == "Cyanobacteria")
View(tax_cyn)
tax_cyn=tax %>% filter(Order == "Chloroplast")
tax_cyn=tax %>% filter(Order == "Chloroplast" | Kingdom != "Bacteria")
tax_cyn2=tax %>% filter(is.na(Kingdom))
View(tax_cyn2)
tax_cyn2=tax %>% filter(is.na(Phylum))
View(tax)
# setting the unallowed taxonomy:
# not bacteria, chloroplast or mitochondria
tax_exclude <- tax %>%
filter(Kingdom != "Bacteria" | Order == "Chloroplast" | Family == "Mitochondria" | is.na(Kingdom))
View(tax_exclude)
data_asv_long_format <- read_csv("data/data_processed/microbiome/data_asv_rra0.01_th1000.csv")
data_asv_long_format_clean <- data_asv_long_format %>%
filter(!(asv_ID %in% tax_exclude$asv_ID))
# finding phylogenetic distance
# reading the phylogenetic tree
best_tree <- readRDS(file = "../results/phylo_tree_0.01_2.rds")
# finding phylogenetic distance
# reading the phylogenetic tree
best_tree <- readRDS(file = "results/phylo_tree_0.01_2.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
# mean distance for each ASV
mean_phylo_dist <- as.data.frame(asv_distance) %>%
rownames_to_column("asv_ID") %>%
rowMeans()
# mean distance for each ASV
mean_phylo_dist <- rowMeans(asv_distance)
mean_phylo_dist[1:10]
hist(mean_phylo_dist)
mean_phylo_dist[mean_phylo_dist>4]
mean_phylo_dist[mean_phylo_dist>3]
a <- names(mean_phylo_dist[mean_phylo_dist>3])
b <- tax %>% filter(!(asv_ID %in% tax_include$asv_ID) & asv_ID %in% a$asv_ID)
b <- tax %>% filter(!(asv_ID %in% tax_include$asv_ID) & asv_ID %in% a)
b <- tax %>% filter(!(asv_ID %in% tax_exclude$asv_ID) & asv_ID %in% a)
View(b)
View(b)
data_asv_long_format_clean <- data_asv_long_format %>%
filter(!(asv_ID %in% tax_exclude$asv_ID)) %>%
filter(asv_ID != "ASV_4819")
write_csv(data_asv_long_format_clean, "data/data_processed/microbiome/data_asv_rra0.01_th1000_clean.csv")
data_asv <- read_csv("../data/data_processed/microbiome/data_asv_rra0.01_th1000_clean.csv") %>%
filter(host_species == "Rattus rattus")
# first of all, run this chunk of code.
# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_seq <- seq(1,20, by=1)
village_names <- unique(data_asv$village)
nmi_observed_three_villages <- NULL
nmi_diff_core_three_villages <- NULL
modules_similarity_three_villages <- NULL
asv_degree_distribution_three_villages <- NULL
modules_three_villages <- NULL
modules_size_three_villages <- NULL
modules_grid_three_villages <- NULL
modules_table_three_villages <- NULL
betaNTI_three_villages <- NULL
raupc_three_villages <- NULL
# reading the phylogenetic tree
best_tree <- readRDS(file = "../results/phylo_tree_0.01_2.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
# for loop for three villages
for (v in village_names) {
data_asv_village <- data_asv %>%
filter(village == v)
# calculating ASVs degree
asv_degree <- data_asv_village %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
rename(asv_degree = n)
data_asv_village %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_village)
modules_table_three_villages <- rbind(modules_table_three_villages, modules_observed)
#write_csv(modules_table_three_villages, "../results/modules_table_three_villages.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_villages <- append(modules_similarity_three_villages, modules_similarity)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_village)
asv_degree_distribution_three_villages <- append(asv_degree_distribution_three_villages, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed)
modules_three_villages <- append(modules_three_villages, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_villages <- append(modules_size_three_villages, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_villages <- append(modules_grid_three_villages, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_villages <- append(nmi_observed_three_villages, nmi_observed)
##### NMI for different values of core microbiome
# calling the function
nmi_diff_core <- fun_modularity_diff_core(data_asv_village, nmi_observed, core_seq) %>%
mutate(village = v)
# saving results in one list
nmi_diff_core_three_villages <- rbind(nmi_diff_core_three_villages, nmi_diff_core)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_village %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_village$asv_ID)))
# calculating betaNTI
data_betaNTI <- data_asv_village %>%
distinct(host_ID, asv_ID) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
betaNTI_three_villages <- rbind(betaNTI_three_villages, betaNTI)
# raup-crick
raupc <- raupcrick(data_betaNTI)
raupc2 <- as.matrix(raupc)
raupc2[upper.tri(raupc2)] <- NA
diag(raupc2) <- NA
raupc2_m <- melt(raupc2) %>%
filter(!(is.na(value)))%>%
rename(host1 = Var1, host2 = Var2, raupc = value) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
raupc_three_villages <- rbind(raupc_three_villages, raupc2_m)
}
?rename
detach("package:S4Vectors", unload = TRUE)
# first of all, run this chunk of code.
# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_seq <- seq(1,20, by=1)
village_names <- unique(data_asv$village)
nmi_observed_three_villages <- NULL
nmi_diff_core_three_villages <- NULL
modules_similarity_three_villages <- NULL
asv_degree_distribution_three_villages <- NULL
modules_three_villages <- NULL
modules_size_three_villages <- NULL
modules_grid_three_villages <- NULL
modules_table_three_villages <- NULL
betaNTI_three_villages <- NULL
raupc_three_villages <- NULL
# reading the phylogenetic tree
best_tree <- readRDS(file = "../results/phylo_tree_0.01_2.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
# for loop for three villages
for (v in village_names) {
data_asv_village <- data_asv %>%
filter(village == v)
# calculating ASVs degree
asv_degree <- data_asv_village %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
rename(asv_degree = n)
data_asv_village %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_village)
modules_table_three_villages <- rbind(modules_table_three_villages, modules_observed)
#write_csv(modules_table_three_villages, "../results/modules_table_three_villages.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_villages <- append(modules_similarity_three_villages, modules_similarity)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_village)
asv_degree_distribution_three_villages <- append(asv_degree_distribution_three_villages, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed)
modules_three_villages <- append(modules_three_villages, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_villages <- append(modules_size_three_villages, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_villages <- append(modules_grid_three_villages, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_villages <- append(nmi_observed_three_villages, nmi_observed)
##### NMI for different values of core microbiome
# calling the function
nmi_diff_core <- fun_modularity_diff_core(data_asv_village, nmi_observed, core_seq) %>%
mutate(village = v)
# saving results in one list
nmi_diff_core_three_villages <- rbind(nmi_diff_core_three_villages, nmi_diff_core)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_village %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_village$asv_ID)))
# calculating betaNTI
data_betaNTI <- data_asv_village %>%
distinct(host_ID, asv_ID) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
betaNTI_three_villages <- rbind(betaNTI_three_villages, betaNTI)
# raup-crick
raupc <- raupcrick(data_betaNTI)
raupc2 <- as.matrix(raupc)
raupc2[upper.tri(raupc2)] <- NA
diag(raupc2) <- NA
raupc2_m <- melt(raupc2) %>%
filter(!(is.na(value)))%>%
rename(host1 = Var1, host2 = Var2, raupc = value) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
raupc_three_villages <- rbind(raupc_three_villages, raupc2_m)
}
