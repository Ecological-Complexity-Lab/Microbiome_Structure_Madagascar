mutate(p = asv_degree/length(unique(data_asv_group$asv_ID)))
# calculating betaNTI
data_betaNTI <- data_asv_group %>%
distinct(host_ID, asv_ID) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(asv_core = v)
betaNTI_three_groups <- rbind(betaNTI_three_groups, betaNTI)
# raup-crick
raupc <- raupcrick(data_betaNTI)
raupc2 <- as.matrix(raupc)
raupc2[upper.tri(raupc2)] <- NA
diag(raupc2) <- NA
raupc2_m <- melt(raupc2) %>%
filter(!(is.na(value)))%>%
dplyr::rename(host1 = Var1, host2 = Var2, raupc = value) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(asv_core = v)
raupc_three_groups <- rbind(raupc_three_groups, raupc2_m)
}
View(modules_table_three_groups)
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group)
a=hosts %>% filter(asv_core=="Core")
b=hosts %>% filter(asv_core=="Non_core")
c=hosts %>% filter(asv_core=="Rare")
nmi_obs <- aricode::NMI(a$host_group, b$host_group, "sum")
View(hosts)
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group)
nmi_obs <- aricode::NMI(hosts$Core, hosts$Non_core, "sum")
?NMI
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group) %>% filter(across(everything(), !is.na()))
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group) %>% filter(across(everything(), !is.na(.)))
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group) %>% filter(across(everything(!is.na(.))))
?across
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group) %>% filter(across(everything(), !is.na()))
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group) %>% filter(across(everything(), ~!is.na()))
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group) %>% filter(across(everything(), ~!is.na(.)))
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group)
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group) %>% filter(across(everything(), ~!is.na(.)))
nmi_obs <- aricode::NMI(hosts$Core, hosts$Non_core, "sum")
nmi_obs <- aricode::NMI(hosts$Core, hosts$Rare, "sum")
nmi_obs <- aricode::NMI(hosts$Non_core, hosts$Rare, "sum")
View(data_asv)
i=1
data_asv_filtered <- data_asv %>%
filter(asv_core == core_names[i])
# observed NMI
hosts <- data_asv_filtered %>% distinct(host_ID, grid, host_group)
View(data_asv_filtered)
View(modules_table_three_groups)
data_asv_filtered <- modules_table_three_groups %>%
filter(asv_core == core_names[i])
# observed NMI
hosts <- data_asv_filtered %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::NMI(hosts$grid, hosts$host_group, "sum")
nmi_observed_groups <- vector(length=3)
nmi_observed_groups[i] <- nmi_obs
nmi_shuff_groups <- NULL
n_shuff <- 10
View(data_asv)
# shuffling the network
data_asv_mat <- data_asv_filtered %>% select(asv_ID, host_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
View(data_asv_mat)
null_model <- vegan::nullmodel(data_asv_mat, method = 'r0_samp')
shuffled_r <- simulate(null_model, nsim = 1)
shuffled_r[1]
# building the network
network_object <- create_monolayer_network(shuffled_r, directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
shuffled_r <- as.matrix(simulate(null_model, nsim = 1))
View(shuffled_r)
shuffled_r <- simulate(null_model, nsim = 1)
shuffled_r$data
shuffled_r[data]
shuffled_r$n
?run_infomap_monolayer
?create_monolayer_network
?infomap
shuffled_r <- simulate(null_model, nsim = 2)
shuffled_r[[1]]
shuffled_r[1]
shuffled_r[,,1]
a=shuffled_r[,,1]
View(a)
View(data_asv_mat)
shuffled_r <- simulate(null_model, nsim = 1)
# building the network
network_object <- create_monolayer_network(shuffled_r[,,1], directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# adding the modules classification to the data
modules_host <- infomap_object$modules %>% filter(node_group == "Host")%>% dplyr::rename(host_group = module_level1, host_ID = node_name) %>% mutate(host_ID = as.numeric(host_ID))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_host <- infomap_object$modules %>% filter(node_group == "Host")%>% dplyr::rename(host_group = module_level1, host_ID = node_name) %>% mutate(host_ID = as.numeric(host_ID))
View(modules_host)
# adding the modules classification to the data
modules_host <- infomap_object$modules %>%
filter(node_group == "Host") %>%
dplyr::rename(host_group = module_level1, host_ID = node_name) %>%
mutate(host_ID = as.numeric(host_ID)) %>%
left_join(hosts, by="host_ID")
# adding the modules classification to the data
modules_host <- infomap_object$modules %>%
filter(node_group == "Host") %>%
dplyr::rename(host_group_shuff = module_level1, host_ID = node_name) %>%
mutate(host_ID = as.numeric(host_ID)) %>%
left_join(hosts, by="host_ID")
nmi_shuff <- aricode::NMI(modules_host$grid, modules_host$host_group_shuff, "sum")
nmi_shuff <- data.frame(nmi = aricode::NMI(modules_host$grid, modules_host$host_group_shuff, "sum"),
asv_core = core_names[i])
View(nmi_shuff)
nmi_shuff_groups <- rbind(nmi_shuff_groups, nmi_shuff)
# making a data frame out of the observed results
nmi_observed_three_groups_df <- nmi_observed_three_groups[[1]] %>%
bind_rows(nmi_observed_three_groups[[3]]) %>%
bind_rows(nmi_observed_three_groups[[5]]) %>%
mutate(asv_core = core_names)
View(nmi_observed_three_groups_df)
nmi_observed_groups <- vector(length=3)
n_shuff <- 10
nmi_shuff_groups <- NULL
for (i in 1:3) {
data_asv_filtered <- modules_table_three_groups %>%
filter(asv_core == core_names[i])
# observed NMI
hosts <- data_asv_filtered %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::NMI(hosts$grid, hosts$host_group, "sum")
nmi_observed_groups[i] <- nmi_obs
# shuffle NMI
for (j in 1:n_shuff) {
# shuffling the network
data_asv_mat <- data_asv_filtered %>% select(asv_ID, host_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
null_model <- vegan::nullmodel(data_asv_mat, method = 'r0_samp')
shuffled_r <- simulate(null_model, nsim = 1)
# building the network
network_object <- create_monolayer_network(shuffled_r[,,1], directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_host <- infomap_object$modules %>%
filter(node_group == "Host") %>%
dplyr::rename(host_group_shuff = module_level1, host_ID = node_name) %>%
mutate(host_ID = as.numeric(host_ID)) %>%
left_join(hosts, by="host_ID")
nmi_shuff <- data.frame(nmi = aricode::NMI(modules_host$grid, modules_host$host_group_shuff, "sum"),
asv_core = core_names[i])
nmi_shuff_groups <- rbind(nmi_shuff_groups, nmi_shuff)
}
}
# plotting
g <- nmi_shuff_groups %>%
ggplot(aes(nmi, fill=asv_core)) +
geom_histogram(alpha=0.8, color="white") +
facet_wrap(~asv_core, scales="free") +
scale_y_continuous(limits = c(0, 100)) +
#geom_vline(data=nmi_observed_three_groups_df, aes(xintercept = nmi), linetype='dashed', color="black") +
#geom_label(data = nmi_observed_three_groups_df, aes(label = paste("NMI =", round(nmi,2)), x = Inf, y = Inf),
#       vjust = 1.5,hjust = 1.1, size = 4, color = "black", fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14), strip.text = element_text(size=12), panel.grid = element_blank(), legend.position="none") +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_fill_manual(values=group.colors) +
labs(x="Normalized Mutual Information (NMI)", y="Count")
print(g)
cat('\n','\n')
nmi_observed_groups <- vector(length=3)
n_shuff <- 10
nmi_shuff_groups <- NULL
for (i in 1:3) {
data_asv_filtered <- modules_table_three_groups %>%
filter(asv_core == core_names[i])
# observed NMI
hosts <- data_asv_filtered %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::NMI(hosts$grid, hosts$host_group, "sum")
nmi_observed_groups[i] <- nmi_obs
# shuffle NMI
for (j in 1:n_shuff) {
# shuffling the network
data_asv_mat <- data_asv_filtered %>% select(asv_ID, host_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
null_model <- vegan::nullmodel(data_asv_mat, method = 'c0_samp')
shuffled_r <- simulate(null_model, nsim = 1)
# building the network
network_object <- create_monolayer_network(shuffled_r[,,1], directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_host <- infomap_object$modules %>%
filter(node_group == "Host") %>%
dplyr::rename(host_group_shuff = module_level1, host_ID = node_name) %>%
mutate(host_ID = as.numeric(host_ID)) %>%
left_join(hosts, by="host_ID")
nmi_shuff <- data.frame(nmi = aricode::NMI(modules_host$grid, modules_host$host_group_shuff, "sum"),
asv_core = core_names[i])
nmi_shuff_groups <- rbind(nmi_shuff_groups, nmi_shuff)
}
}
# adding the modules classification to the data
modules_host <- infomap_object$modules %>%
filter(node_group == "Host") %>%
dplyr::rename(host_group_shuff = module_level1, host_ID = node_name) %>%
mutate(host_ID = as.numeric(host_ID)) %>%
left_join(hosts, by="host_ID") %>%
filter(!is.na(host_group_shuff))
nmi_observed_groups <- vector(length=3)
n_shuff <- 10
nmi_shuff_groups <- NULL
for (i in 1:3) {
data_asv_filtered <- modules_table_three_groups %>%
filter(asv_core == core_names[i])
# observed NMI
hosts <- data_asv_filtered %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::NMI(hosts$grid, hosts$host_group, "sum")
nmi_observed_groups[i] <- nmi_obs
# shuffle NMI
for (j in 1:n_shuff) {
# shuffling the network
data_asv_mat <- data_asv_filtered %>% select(asv_ID, host_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
null_model <- vegan::nullmodel(data_asv_mat, method = 'c0_samp')
shuffled_r <- simulate(null_model, nsim = 1)
# building the network
network_object <- create_monolayer_network(shuffled_r[,,1], directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_host <- infomap_object$modules %>%
filter(node_group == "Host") %>%
dplyr::rename(host_group_shuff = module_level1, host_ID = node_name) %>%
mutate(host_ID = as.numeric(host_ID)) %>%
left_join(hosts, by="host_ID") %>%
filter(!is.na(host_group_shuff))
nmi_shuff <- data.frame(nmi = aricode::NMI(modules_host$grid, modules_host$host_group_shuff, "sum"),
asv_core = core_names[i])
nmi_shuff_groups <- rbind(nmi_shuff_groups, nmi_shuff)
}
}
# plotting
g <- nmi_shuff_groups %>%
ggplot(aes(nmi, fill=asv_core)) +
geom_histogram(alpha=0.8, color="white") +
facet_wrap(~asv_core, scales="free") +
scale_y_continuous(limits = c(0, 100)) +
#geom_vline(data=nmi_observed_three_groups_df, aes(xintercept = nmi), linetype='dashed', color="black") +
#geom_label(data = nmi_observed_three_groups_df, aes(label = paste("NMI =", round(nmi,2)), x = Inf, y = Inf),
#       vjust = 1.5,hjust = 1.1, size = 4, color = "black", fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14), strip.text = element_text(size=12), panel.grid = element_blank(), legend.position="none") +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_fill_manual(values=group.colors) +
labs(x="Normalized Mutual Information (NMI)", y="Count")
print(g)
cat('\n','\n')
data_asv_filtered <- modules_table_three_groups %>%
filter(asv_core == core_names[i])
# observed NMI
hosts <- data_asv_filtered %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::AMI(hosts$grid, hosts$host_group, "sum")
aricode::AMI(hosts$grid, hosts$host_group)
i=2
data_asv_filtered <- modules_table_three_groups %>%
filter(asv_core == core_names[i])
# observed NMI
hosts <- data_asv_filtered %>% distinct(host_ID, grid, host_group)
aricode::AMI(hosts$grid, hosts$host_group)
hosts <- modules_table_three_groups %>% distinct(host_ID, asv_core, host_group) %>%
spread(asv_core, host_group) %>% filter(across(everything(), ~!is.na(.)))
aricode::AMI(hosts$Non_core, hosts$Rare)
0.047*43
0.21*43
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=n, fill=asv_core)) +
geom_density() +
theme_classic() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="Module Size")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=n, fill=asv_core)) +
geom_histogram() +
theme_classic() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="Module Size")
print(g)
library(ggridges)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges() +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="Module Size")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=20) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="Module Size")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=50) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="Module Size")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=50) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="Module Size", y="Density")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges(alpha=0.6) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="Module Size", y="Density")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(grid)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=50) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="No. of Land Uses", y="Density")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(grid)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges(alpha=0.6) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="No. of Land Uses", y="Density")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(grid)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=7) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="No. of Land Uses", y="Density")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=150) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="Module Size", y="Density")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=n, y=asv_core, fill=asv_core)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=50) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="Module Size", y="Density")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(grid)) %>%
ggplot(aes(x=n, fill=asv_core)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=7) +
theme_ridges() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="No. of Land Uses", y="Density")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot() +
theme_classic() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="Module Size", y="Density")
print(g)
?geom_boxplot
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE) +
theme_classic() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="Module Size", y="Density")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(grid)) %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(alpha=0.6, outliers = FALSE) +
theme_classic() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Land Uses")
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(grid)) %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot() +
theme_classic() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Land Uses")
print(g)
# reading grid similarity results
grids_similarity_attr <- read_csv("../data/data_processed/village_summary.csv")
# correlations between variables
# loop for three villages
library(psych)
print(psych::pairs.panels(grids_similarity_attr %>% filter(village == vil) %>%  select(-village,-grid1,-grid2), ellipses = F, lm = T))
cat('\n','\n')
