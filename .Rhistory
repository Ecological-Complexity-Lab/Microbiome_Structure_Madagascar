#data_asv %<>% filter(asv_ID %in% n_asv$asv_ID)
#data_asv_mat <- data_asv %>%
#  spread(asv_ID, reads, fill = 0) %>%
#  mutate(across(starts_with("ASV"), ~.*unfiltered_reads)) %>%
#  mutate(total_reads = select(.,starts_with("ASV")) %>% rowSums(na.rm = TRUE)) %>%
#  mutate(across(starts_with("ASV"), ~./total_reads)) %>%
#  gather("asv_ID", "reads", starts_with("ASV")) %>%
#  filter(reads>0)
#data_mammals <- read_csv("data_raw/Terrestrial_Mammals.csv")
#data_mammals %<>% mutate(host_ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", animal_id))) %>%
#  mutate(dist_village = as.numeric(gsub(".*?([0-9,.]+).*", "\\1", dist_village_center))) %>%
#  select(host_ID, dist_village)
#full_grids <- read_csv("data_processed/three_villages/data_SM.csv") %>% dplyr::select(host_ID, grid) %>%
#  left_join(data_mammals, by="host_ID")
#data_asv %<>% dplyr::select(-grid) %>%left_join(full_grids, by="host_ID") %>%
#  mutate(dist_village = ifelse(grid=="village",0,dist_village))
#write_csv(data_asv_mat, "data_processed/three_villages/data_asv_0.01_grids2.csv")
# distance between grids
grid_dist_avg <- data_asv %>%
distinct(host_ID, grid, dist_village) %>%
group_by(grid) %>%
summarise(distance = mean(dist_village))
data_asv_mat <- data_asv %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
s="Rattus rattus"
data_asv_s <- data_asv %>% filter(host_species==s)
data_asv_mat <- data_asv_s %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
# building the network
network_object <- infomapecology::create_monolayer_object(data_asv_mat, directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_asv <- infomap_object$modules %>% filter(node_group == "ASV")%>% dplyr::rename(asv_group = module_level1, asv_ID = node_name)
modules_host <- infomap_object$modules %>% filter(node_group == "Host")%>% dplyr::rename(host_group = module_level1, host_ID = node_name) %>% mutate(host_ID = as.numeric(host_ID))
data_asv_s %<>% left_join(modules_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID") %>%
left_join(modules_host %>% dplyr::select(host_ID,host_group), by = "host_ID")
View(data_asv_s)
View(modules_asv)
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n= n_distinct(grid))
View(n_module_grid)
n_asv <- data_asv_s %>%
count(asv_ID)
View(n_asv)
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n_grid = n_distinct(grid))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,.))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,n))
n_asv %>%
ggplot(aes(x=as.factor(n), y=n_grid, fill=as.factor(n))) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="Host Species", y="Microbiome Similarity [Jaccard]")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = as.factor(n, levels = c("1-4","5-9","10+")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = factor(n, levels = c("1-4","5-9","10+")))
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Degree", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png','pdf'), out.width = '100%', out.height='40%')
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
library(tidyverse)
library(magrittr)
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
View(data_asv)
knitr::opts_chunk$set(echo = T, results = "show", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, out.width = '100%', out.height='40%')
library(igraph)
library(bipartite)
library(RColorBrewer)
knitr::opts_chunk$set(results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png'), out.width = '100%', out.height='60%')
library(tidyverse)
chesapeake_nodes <- read.csv('data/Chesapeake_bay_nodes.csv', header=F)
names(chesapeake_nodes) <- c('nodeId','species_name')
chesapeake_links <- read.csv('data/Chesapeake_bay_links.csv', header=F)
names(chesapeake_links) <- c('from','to','weight')
ches_web <- graph.data.frame(chesapeake_links, vertices = chesapeake_nodes, directed = T)
ches_web_unweighted <- ches_web
ches_web_unweighted <- as.undirected(ches_web_unweighted)
E(ches_web_unweighted)$weight <- 1
cl <- cluster_louvain(ches_web_unweighted) # Can also use the weights = NULL argument
class(cl) # the result is of class communities
module_membership <- membership(cl)
cols <- data.frame(mem=unique(module_membership),
col= brewer.pal(length(unique(module_membership)), 'Set1'))
V(ches_web_unweighted)$module_membership <- module_membership
V(ches_web_unweighted)$color <- cols$col[match(V(ches_web_unweighted)$module_membership, cols$mem)]
plot(ches_web_unweighted, vertex.color=V(ches_web_unweighted)$color,
vertex.size=5, vertex.label=NA,
edge.arrow.width=0.3, edge.arrow.curve=0.5)
View(chesapeake_nodes)
module_membership
chesapeake_nodes$moduleID <- module_membership
plot(ches_web_unweighted, vertex.color=V(ches_web_unweighted)$color,
vertex.size=5, vertex.label=module_membership,
edge.arrow.width=0.3, edge.arrow.curve=0.5)
plot(ches_web_unweighted, vertex.color=V(ches_web_unweighted)$color,
vertex.size=5, vertex.label=name,
edge.arrow.width=0.3, edge.arrow.curve=0.5)
View(chesapeake_nodes)
View(chesapeake_nodes)
plot(ches_web_unweighted, vertex.color=V(ches_web_unweighted)$color,
vertex.size=5, vertex.label=species_name,
edge.arrow.width=0.3, edge.arrow.curve=0.5)
View(chesapeake_nodes)
vertex_attr(ches_web_unweighted)
plot(ches_web_unweighted, vertex.color=V(ches_web_unweighted)$color,
vertex.size=5, vertex.label=species_name,
edge.arrow.width=0.3, edge.arrow.curve=0.5)
plot(ches_web_unweighted, vertex.color=V(ches_web_unweighted)$color,
vertex.size=5, vertex.label=V(ches_web_unweighted)$species_name,
edge.arrow.width=0.3, edge.arrow.curve=0.5)
cl$algorithm
cl$names
cl$memberships
cl$membership
cl$modularity
?cluster_louvain
modularity(cl)
cl$vcount
cl$modularity
setwd("~/GitHub/Microbiome_Structure_Madagascar")
library(tidyverse)
library(magrittr)
library(ggplot2)
library(vegan)
library(igraph)
library(reshape2)
library(infomapecology)
library(aricode)
library(ape)
library(picante)
library(patchwork)
rm(list=ls())
check_infomap()
library(Biostrings)
library(DECIPHER)
# reading small mammals data
data_mammals <- read_csv("data/data_raw/data_small_mammals/Terrestrial_Mammals.csv")
# reading ASVs raw data
data_asv <- read_csv("data/data_raw/data_microbiome/merged_full_sample_table.csv")
data_asv %<>% filter(sample_type == "SAMPLE") %>%
filter(!(grepl("D",Sample_Name)))
# extracting samples IDs (taking only numbers due to unmatching formats)
data_mammals %<>% mutate(host_ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", animal_id)))
data_asv %<>% mutate(host_ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", Sample_Name)))
# matching small-mammals (SM) IDs in the two data files and taking only SM with microbes data
data_sm <- semi_join(data_mammals, data_asv, by="host_ID") %>%
dplyr::select(host_ID, field_identification, village, habitat_type, season) %>%
dplyr::rename(host_species = field_identification, grid = habitat_type) %>%
mutate(season = factor(season, levels = c("1","2","3"))) %>%
mutate(grid = factor(grid, levels = c("semi-intact_forest","secondary_forest","brushy_regrowth","agriculture","flooded_rice","agroforest","village")))
# combining asv data and SM data
data_asv_f <- data_asv %>%
dplyr::select(host_ID, unfiltered_reads, contains("ASV"))
dat <- left_join(data_sm, data_asv_f, by="host_ID")
##### filter 1
# filtering non-rattus host species
dat1 <- dat %>%
filter(host_species == "Rattus rattus") %>%
select_if(~ any(. != 0))  # removing all ASVs not belonging to rattus (0 in all samples)
# adding taxonomy
tax <- read_delim("data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv") %>%
dplyr::rename(asv_ID = ASV)
# setting the not allowed taxonomy:
# not bacteria, chloroplast or mitochondria
tax_exclude <- tax %>%
filter(asv_ID %in% colnames(dat1)) %>%
filter(Kingdom != "Bacteria" | Order == "Chloroplast" | Family == "Mitochondria" | is.na(Kingdom))
dat2 <- dat1 %>%
select(-all_of(tax_exclude$asv_ID))
##### filter 3
# removing ASVs with very low relative read abundance in each sample
asv_rel_reads_th <- 0.005
dat3 <- dat2 %>%
mutate(across(starts_with("ASV"),~ ./unfiltered_reads)) %>%
mutate(across(starts_with("ASV"), ~ifelse(.<asv_rel_reads_th,0,.))) %>%
mutate(across(starts_with("ASV"),~ .*unfiltered_reads)) %>%
select_if(~ any(. != 0))
# transforming to long format
dat3_long <- dat3 %>%
gather("asv_ID", "reads", starts_with("ASV")) %>%
filter(reads>0)
# number of hosts in each village
n_host_village <- dat3_long %>%
group_by(village) %>% summarise(n_host = n_distinct(host_ID))
# ASVs occurrence by village
asv_occur_village <- dat3_long %>%
count(village, asv_ID) %>%
left_join(n_host_village, by="village") %>%
mutate(host_p = n/n_host)
dat4 <- asv_occur_village %>%
filter(n > 1) %>%
select(village, asv_ID) %>%
left_join(dat3_long, by=c("village","asv_ID"))
# finding phylogenetic distance
# reading the full dna sequences (fasta file)
seq_fa <- read.FASTA(file="data/data_raw/data_microbiome/ASV_merged_full.fa")
asv_names <- tibble(asv_ID = unique(dat4$asv_ID))
asv_names %<>% mutate(ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", asv_ID))) %>% arrange(ID)
seq_fa2 <- seq_fa[names(seq_fa) %in% asv_names$asv_ID]
names(seq_fa2) <- asv_names$asv_ID
write.FASTA(seq_fa2, file = "data/data_raw/data_microbiome/ASV_filtered_new2.fa")
# aligning the sequences
seq_aligned <- readDNAStringSet("data/data_raw/data_microbiome/ASV_filtered_new2.fa")
aligned <- DECIPHER::AlignSeqs(seq_aligned)
seq_aligned2 <- as.DNAbin(aligned)
# mean distance for each ASV
mean_phylo_dist <- rowMeans(asv_distance)
hist(mean_phylo_dist)
seq_aligned2 <- as.DNAbin(aligned)
# calculating distance
asv_distance <- as.matrix(ape::dist.dna(seq_aligned2, model = "TN93"))
# mean distance for each ASV
mean_phylo_dist <- rowMeans(asv_distance)
hist(mean_phylo_dist)
quantile(mean_phylo_dist,0.99)
a <- names(mean_phylo_dist[mean_phylo_dist>0.35])
b <- tax %>% filter(!(asv_ID %in% tax_exclude$asv_ID) & asv_ID %in% a)
View(b)
###
# calculating the new final total reads per sample
host_total_reads <- dat4 %>%
group_by(host_ID) %>%
summarise(total_reads = sum(reads))
dat4 %<>% left_join(host_total_reads, by="host_ID") %>%
select(-unfiltered_reads) %>%
mutate(reads_p = reads/total_reads)
# how many ASVs?
length(unique(dat4$asv_ID))
dat4 %>% group_by(village) %>% summarise(n_distinct(asv_ID))
# host richness
host_richness <- dat4 %>% group_by(host_ID) %>% summarise(n=n_distinct(asv_ID))
hist(host_richness$n)
View(b)
# removing samples with less than 5000 total reads
total_reads_th <- 5000
dat5 <- dat4 %>%
filter(total_reads > total_reads_th) %>%
mutate(reads = reads_p) %>%
select(-reads_p)
# how many hosts we lose?
length(unique(dat4$host_ID)) - length(unique(dat5$host_ID))
# saving the data
write_csv(dat5, "data/data_processed/microbiome/data_asv_rra0.005_p1_th5000.csv")
source("modularity_analysis_functions.R", local = knitr::knit_global())
# reading the microbiome data
# working only with Rattus from the three villages
data_asv <- read_csv("../data/data_processed/microbiome/data_asv_rra0.005_p1_th5000.csv")
group.colors <- c(Andatsakala = "#e76f51", Mandena = "#2b9348", Sarahandrano = "#0077b6")
# first of all, run this chunk of code.
# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_seq <- seq(1,21, by=5)
village_names <- unique(data_asv$village)
nmi_observed_three_villages <- NULL
nmi_diff_core_three_villages <- NULL
modules_similarity_three_villages <- NULL
asv_degree_distribution_three_villages <- NULL
modules_three_villages <- NULL
modules_size_three_villages <- NULL
modules_grid_three_villages <- NULL
modules_table_three_villages <- NULL
betaNTI_three_villages <- NULL
raupc_three_villages <- NULL
# reading the phylogenetic tree
seq_aligned <- readDNAStringSet("../data/data_raw/data_microbiome/ASV_filtered_new2.fa")
aligned <- DECIPHER::AlignSeqs(seq_aligned)
seq_aligned2 <- as.DNAbin(aligned)
# calculating distance
asv_distance <- as.matrix(ape::dist.dna(seq_aligned2, model = "TN93"))
# for loop for three villages
for (v in village_names) {
data_asv_village <- data_asv %>%
filter(village == v)
# calculating ASVs degree
asv_degree <- data_asv_village %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
dplyr::rename(asv_degree = n)
data_asv_village %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_village)
modules_table_three_villages <- rbind(modules_table_three_villages, modules_observed)
#write_csv(modules_table_three_villages, "../results/modules_table_three_villages.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_villages <- append(modules_similarity_three_villages, modules_similarity)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_village)
asv_degree_distribution_three_villages <- append(asv_degree_distribution_three_villages, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed)
modules_three_villages <- append(modules_three_villages, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_villages <- append(modules_size_three_villages, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_villages <- append(modules_grid_three_villages, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_villages <- append(nmi_observed_three_villages, nmi_observed)
##### NMI for different values of core microbiome
# calling the function
nmi_diff_core <- fun_modularity_diff_core(data_asv_village, nmi_observed, core_seq) %>%
mutate(village = v)
# saving results in one list
nmi_diff_core_three_villages <- rbind(nmi_diff_core_three_villages, nmi_diff_core)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_village %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_village$asv_ID)))
# calculating betaNTI
data_betaNTI <- data_asv_village %>%
distinct(host_ID, asv_ID) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
betaNTI_three_villages <- rbind(betaNTI_three_villages, betaNTI)
# raup-crick
raupc <- raupcrick(data_betaNTI)
raupc2 <- as.matrix(raupc)
raupc2[upper.tri(raupc2)] <- NA
diag(raupc2) <- NA
raupc2_m <- melt(raupc2) %>%
filter(!(is.na(value)))%>%
dplyr::rename(host1 = Var1, host2 = Var2, raupc = value) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
raupc_three_villages <- rbind(raupc_three_villages, raupc2_m)
}
library(infomapecology)
check_infomap()
library(emln)
# first of all, run this chunk of code.
# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_seq <- seq(1,21, by=5)
village_names <- unique(data_asv$village)
nmi_observed_three_villages <- NULL
nmi_diff_core_three_villages <- NULL
modules_similarity_three_villages <- NULL
asv_degree_distribution_three_villages <- NULL
modules_three_villages <- NULL
modules_size_three_villages <- NULL
modules_grid_three_villages <- NULL
modules_table_three_villages <- NULL
betaNTI_three_villages <- NULL
raupc_three_villages <- NULL
# reading the phylogenetic tree
seq_aligned <- readDNAStringSet("../data/data_raw/data_microbiome/ASV_filtered_new2.fa")
aligned <- DECIPHER::AlignSeqs(seq_aligned)
seq_aligned2 <- as.DNAbin(aligned)
# calculating distance
asv_distance <- as.matrix(ape::dist.dna(seq_aligned2, model = "TN93"))
# for loop for three villages
for (v in village_names) {
data_asv_village <- data_asv %>%
filter(village == v)
# calculating ASVs degree
asv_degree <- data_asv_village %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
dplyr::rename(asv_degree = n)
data_asv_village %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_village)
modules_table_three_villages <- rbind(modules_table_three_villages, modules_observed)
#write_csv(modules_table_three_villages, "../results/modules_table_three_villages.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_villages <- append(modules_similarity_three_villages, modules_similarity)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_village)
asv_degree_distribution_three_villages <- append(asv_degree_distribution_three_villages, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed)
modules_three_villages <- append(modules_three_villages, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_villages <- append(modules_size_three_villages, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_villages <- append(modules_grid_three_villages, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_villages <- append(nmi_observed_three_villages, nmi_observed)
##### NMI for different values of core microbiome
# calling the function
nmi_diff_core <- fun_modularity_diff_core(data_asv_village, nmi_observed, core_seq) %>%
mutate(village = v)
# saving results in one list
nmi_diff_core_three_villages <- rbind(nmi_diff_core_three_villages, nmi_diff_core)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_village %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_village$asv_ID)))
# calculating betaNTI
data_betaNTI <- data_asv_village %>%
distinct(host_ID, asv_ID) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
betaNTI_three_villages <- rbind(betaNTI_three_villages, betaNTI)
# raup-crick
raupc <- raupcrick(data_betaNTI)
raupc2 <- as.matrix(raupc)
raupc2[upper.tri(raupc2)] <- NA
diag(raupc2) <- NA
raupc2_m <- melt(raupc2) %>%
filter(!(is.na(value)))%>%
dplyr::rename(host1 = Var1, host2 = Var2, raupc = value) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
raupc_three_villages <- rbind(raupc_three_villages, raupc2_m)
}
