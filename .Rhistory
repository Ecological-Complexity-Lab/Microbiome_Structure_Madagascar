# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_seq <- seq(0.01,0.01, by=0.01)
village_names <- unique(data_asv$village)
nmi_observed_three_villages <- NULL
nmi_diff_core_three_villages <- NULL
modules_similarity_three_villages <- NULL
asv_degree_distribution_three_villages <- NULL
modules_three_villages <- NULL
modules_size_three_villages <- NULL
modules_grid_three_villages <- NULL
modules_table_three_villages <- NULL
betaNTI_three_villages <- NULL
raupc_three_villages <- NULL
# reading the phylogenetic tree
best_tree <- readRDS(file = "../results/phylo_tree_rra0.001_p0.01.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
# for loop for three villages
for (v in village_names) {
data_asv_village <- data_asv %>%
filter(village == v)
# calculating ASVs degree
asv_degree <- data_asv_village %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
dplyr::rename(asv_degree = n)
data_asv_village %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_village)
modules_table_three_villages <- rbind(modules_table_three_villages, modules_observed)
#write_csv(modules_table_three_villages, "../results/modules_table_three_villages.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_villages <- append(modules_similarity_three_villages, modules_similarity)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_village)
asv_degree_distribution_three_villages <- append(asv_degree_distribution_three_villages, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed)
modules_three_villages <- append(modules_three_villages, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_villages <- append(modules_size_three_villages, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_villages <- append(modules_grid_three_villages, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_villages <- append(nmi_observed_three_villages, nmi_observed)
##### NMI for different values of core microbiome
# calling the function
nmi_diff_core <- fun_modularity_diff_core(data_asv_village, nmi_observed, core_seq) %>%
mutate(village = v)
# saving results in one list
nmi_diff_core_three_villages <- rbind(nmi_diff_core_three_villages, nmi_diff_core)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_village %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_village$asv_ID)))
# calculating betaNTI
data_betaNTI <- data_asv_village %>%
distinct(host_ID, asv_ID) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
betaNTI_three_villages <- rbind(betaNTI_three_villages, betaNTI)
# raup-crick
raupc <- raupcrick(data_betaNTI)
raupc2 <- as.matrix(raupc)
raupc2[upper.tri(raupc2)] <- NA
diag(raupc2) <- NA
raupc2_m <- melt(raupc2) %>%
filter(!(is.na(value)))%>%
dplyr::rename(host1 = Var1, host2 = Var2, raupc = value) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
raupc_three_villages <- rbind(raupc_three_villages, raupc2_m)
}
# loop for three villages
for (i in 1:3) {
cat('##',village_names[i],'{.tabset}','\n','\n')
cat('### ASVs degree distribution','\n')
print(asv_degree_distribution_three_villages[[i]])
cat('\n','\n')
# calculating connectance
connectance_data <- modules_table_three_villages %>%
filter(village == village_names[i])
cat('No. of hosts: ', length(unique(connectance_data$host_ID)) ,'\n','\n')
cat('No. of ASVs: ', length(unique(connectance_data$asv_ID)) ,'\n','\n')
cat('Connectance: ', nrow(connectance_data) / (length(unique(connectance_data$host_ID)) * length(unique(connectance_data$asv_ID))) ,'\n','\n')
cat('### Modules','\n')
cat('The color indicates number of host individuals in the module / total number of hosts in the whole grid [%]','\n','\n')
print(modules_three_villages[[i]])
cat('\n','\n')
cat('### Modules size','\n')
print(modules_size_three_villages[[i]])
cat('\n','\n')
cat('### No. of land uses','\n')
print(modules_grid_three_villages[[i]])
cat('\n','\n')
}
View(modules_table_three_villages)
a=modules_table_three_villages %>% distinct(host_ID, village,season,host_group)
View(a)
b=a %>% group_by(village,host_group) %>% summarise(n_distinct(season))
View(b)
# same module?
betaNTI_final <- betaNTI_three_villages %>%
mutate(same_module = ifelse(host_group1==host_group2, "Same","Different")) %>%
mutate(host_group1_org = host_group1) %>%
rowwise() %>%
mutate(host_group1 = sort(c(host_group1, host_group2))[1], host_group2 = sort(c(host_group1_org, host_group2))[2])
betaNTI_summary <- betaNTI_final %>%
group_by(village, same_module, host_group1, host_group2) %>%
summarise(mean_betaNTI = mean(betaNTI)) %>%
group_by(village, same_module) %>%
summarise(betaNTI = mean(mean_betaNTI))
#plotting
betaNTI_g <- betaNTI_final %>%
group_by(village, same_module, host_group1, host_group2) %>%
summarise(mean_betaNTI = mean(betaNTI)) %>%
ggplot(aes(x=same_module, y=mean_betaNTI, fill=village)) +
geom_boxplot(outlier.shape = NA, alpha=0.8) +
geom_label(data = betaNTI_summary, aes(label = sprintf("%.2f", betaNTI), y = betaNTI), position = position_dodge(width = 0.75), size = 4,color="white",alpha=0.8, show.legend=F) +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_bw() +
scale_y_continuous(limits = c(-2, 4), breaks = seq(-2,4, by=2)) +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), panel.grid = element_blank(), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="", y=paste("\u03B2","NTI", sep = ""))
# same module?
raupc_final <- raupc_three_villages %>%
mutate(same_module = ifelse(host_group1==host_group2, "Same","Different")) %>%
mutate(host_group1_org = host_group1) %>%
rowwise() %>%
mutate(host_group1 = sort(c(host_group1, host_group2))[1], host_group2 = sort(c(host_group1_org, host_group2))[2])
raupc_summary <- raupc_final %>%
group_by(village, same_module, host_group1, host_group2) %>%
summarise(mean_raupc = mean(raupc)) %>%
group_by(village, same_module) %>%
summarise(raupc = mean(mean_raupc))
#plotting
raupc_g <- raupc_final %>%
group_by(village, same_module, host_group1, host_group2) %>%
summarise(mean_raupc = mean(raupc)) %>%
ggplot(aes(x=same_module, y=mean_raupc, fill=village)) +
geom_boxplot(outlier.shape = NA, alpha=0.8) +
geom_label(data = raupc_summary, aes(label = sprintf("%.2f", raupc), y = raupc), position = position_dodge(width = 0.75), size = 4, color="white",alpha=0.8, show.legend=F) +
theme_bw() +
scale_y_continuous(limits = c(0, 1), breaks = seq(0,1, by=0.2)) +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), panel.grid = element_blank()) +
scale_fill_manual(values=group.colors) +
labs(x="", y="Raup-Crick", fill="Village")
# plotting the final figure
p <- betaNTI_g + raupc_g
print(p)
cat('\n','\n')
# combining final results
assembly_final <- betaNTI_final %>%
left_join(raupc_final %>% select(host1,host2,raupc), by=c("host1","host2"))
# calculating the process
assembly_final %<>% mutate(process = case_when(betaNTI>2 ~ "Heterogeneous Selection",
betaNTI<(-2) ~ "Homogeneous Selection",
(betaNTI<=2 & betaNTI>=(-2) & raupc>0.95) ~ "Dispersal Limitation",
(betaNTI<=2 & betaNTI>=(-2) & raupc<(-0.95)) ~ "Homogenizing Dispersal",
.default = "Drift"))
# summary
assembly_summary <- assembly_final %>%
count(village, same_module, process)
#plotting
g <- assembly_summary %>%
ggplot(aes(fill=process, x=same_module, y=n)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="", y="Proportion")
print(g)
source("modularity_analysis_functions.R", local = knitr::knit_global())
# reading the microbiome data
# working only with Rattus from the three villages
data_asv <- read_csv("../data/data_processed/microbiome/data_asv_rra0.001_p0.01_th5000.csv") %>% filter(host_p<=0.2&host_p>=0.02)
group.colors <- c(Andatsakala = "#e76f51", Mandena = "#2b9348", Sarahandrano = "#0077b6")
# relative abundance
s <- data_asv %>%
group_by(village, asv_ID) %>%
summarise(n=mean(reads)) %>%
group_by(village) %>%
summarise(mean=mean(n), median=median(n), sd=sd(n), max=max(n))
# microbes taxonomy
tax <- read_delim("../data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv") %>%
dplyr::rename(asv_ID = ASV)
data_asv_tax <- data_asv %>%
left_join(tax, by="asv_ID")
tax_uni <- tax %>% filter(asv_ID %in% unique(data_asv$asv_ID)) %>%
count(Genus)
cat("## Relative abundance", '\n','\n')
total_reads_village_grid <- data_asv_tax %>% group_by(village, grid) %>% summarise(n_total = sum(total_reads))
g <- data_asv_tax %>%
mutate(reads_a = reads*total_reads) %>%
group_by(village, grid, Phylum) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_village_grid, by=c("village","grid")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=Phylum, x=grid, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="Land Use", y="Relative abundance")
print(g)
cat("## No. of species", '\n','\n')
g <- data_asv_tax %>%
count(village, grid, asv_ID, Phylum) %>%
#filter(n < 2) %>%
group_by(village, grid, Phylum) %>%
summarise(n_asv= n_distinct(asv_ID)) %>%
ggplot(aes(fill=Phylum, x=grid, y=n_asv)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="Land Use", y="Proportion No. of ASVs")
print(g)
cat("## Common", '\n','\n')
g <- data_asv_tax %>%
count(village, grid, asv_ID, Genus) %>%
group_by(village, grid, Genus) %>%
summarise(n_asv= n_distinct(asv_ID)) %>%
ggplot(aes(fill=Genus, x=grid, y=n_asv)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="Land Use", y="Proportion No. of ASVs")
print(g)
View(s)
# first of all, run this chunk of code.
# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_seq <- seq(0.01,0.01, by=0.01)
village_names <- unique(data_asv$village)
nmi_observed_three_villages <- NULL
nmi_diff_core_three_villages <- NULL
modules_similarity_three_villages <- NULL
asv_degree_distribution_three_villages <- NULL
modules_three_villages <- NULL
modules_size_three_villages <- NULL
modules_grid_three_villages <- NULL
modules_table_three_villages <- NULL
betaNTI_three_villages <- NULL
raupc_three_villages <- NULL
# reading the phylogenetic tree
best_tree <- readRDS(file = "../results/phylo_tree_rra0.001_p0.01.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
# for loop for three villages
for (v in village_names) {
data_asv_village <- data_asv %>%
filter(village == v)
# calculating ASVs degree
asv_degree <- data_asv_village %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
dplyr::rename(asv_degree = n)
data_asv_village %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_village)
modules_table_three_villages <- rbind(modules_table_three_villages, modules_observed)
#write_csv(modules_table_three_villages, "../results/modules_table_three_villages.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_villages <- append(modules_similarity_three_villages, modules_similarity)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_village)
asv_degree_distribution_three_villages <- append(asv_degree_distribution_three_villages, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed)
modules_three_villages <- append(modules_three_villages, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_villages <- append(modules_size_three_villages, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_villages <- append(modules_grid_three_villages, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_villages <- append(nmi_observed_three_villages, nmi_observed)
##### NMI for different values of core microbiome
# calling the function
nmi_diff_core <- fun_modularity_diff_core(data_asv_village, nmi_observed, core_seq) %>%
mutate(village = v)
# saving results in one list
nmi_diff_core_three_villages <- rbind(nmi_diff_core_three_villages, nmi_diff_core)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_village %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_village$asv_ID)))
# calculating betaNTI
data_betaNTI <- data_asv_village %>%
distinct(host_ID, asv_ID) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
betaNTI_three_villages <- rbind(betaNTI_three_villages, betaNTI)
# raup-crick
raupc <- raupcrick(data_betaNTI)
raupc2 <- as.matrix(raupc)
raupc2[upper.tri(raupc2)] <- NA
diag(raupc2) <- NA
raupc2_m <- melt(raupc2) %>%
filter(!(is.na(value)))%>%
dplyr::rename(host1 = Var1, host2 = Var2, raupc = value) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(village = v)
raupc_three_villages <- rbind(raupc_three_villages, raupc2_m)
}
# loop for three villages
for (i in 1:3) {
cat('##',village_names[i],'{.tabset}','\n','\n')
cat('### ASVs degree distribution','\n')
print(asv_degree_distribution_three_villages[[i]])
cat('\n','\n')
# calculating connectance
connectance_data <- modules_table_three_villages %>%
filter(village == village_names[i])
cat('No. of hosts: ', length(unique(connectance_data$host_ID)) ,'\n','\n')
cat('No. of ASVs: ', length(unique(connectance_data$asv_ID)) ,'\n','\n')
cat('Connectance: ', nrow(connectance_data) / (length(unique(connectance_data$host_ID)) * length(unique(connectance_data$asv_ID))) ,'\n','\n')
cat('### Modules','\n')
cat('The color indicates number of host individuals in the module / total number of hosts in the whole grid [%]','\n','\n')
print(modules_three_villages[[i]])
cat('\n','\n')
cat('### Modules size','\n')
print(modules_size_three_villages[[i]])
cat('\n','\n')
cat('### No. of land uses','\n')
print(modules_grid_three_villages[[i]])
cat('\n','\n')
}
# same module?
betaNTI_final <- betaNTI_three_villages %>%
mutate(same_module = ifelse(host_group1==host_group2, "Same","Different")) %>%
mutate(host_group1_org = host_group1) %>%
rowwise() %>%
mutate(host_group1 = sort(c(host_group1, host_group2))[1], host_group2 = sort(c(host_group1_org, host_group2))[2])
betaNTI_summary <- betaNTI_final %>%
group_by(village, same_module, host_group1, host_group2) %>%
summarise(mean_betaNTI = mean(betaNTI)) %>%
group_by(village, same_module) %>%
summarise(betaNTI = mean(mean_betaNTI))
#plotting
betaNTI_g <- betaNTI_final %>%
group_by(village, same_module, host_group1, host_group2) %>%
summarise(mean_betaNTI = mean(betaNTI)) %>%
ggplot(aes(x=same_module, y=mean_betaNTI, fill=village)) +
geom_boxplot(outlier.shape = NA, alpha=0.8) +
geom_label(data = betaNTI_summary, aes(label = sprintf("%.2f", betaNTI), y = betaNTI), position = position_dodge(width = 0.75), size = 4,color="white",alpha=0.8, show.legend=F) +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_bw() +
scale_y_continuous(limits = c(-2, 4), breaks = seq(-2,4, by=2)) +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), panel.grid = element_blank(), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="", y=paste("\u03B2","NTI", sep = ""))
# same module?
raupc_final <- raupc_three_villages %>%
mutate(same_module = ifelse(host_group1==host_group2, "Same","Different")) %>%
mutate(host_group1_org = host_group1) %>%
rowwise() %>%
mutate(host_group1 = sort(c(host_group1, host_group2))[1], host_group2 = sort(c(host_group1_org, host_group2))[2])
raupc_summary <- raupc_final %>%
group_by(village, same_module, host_group1, host_group2) %>%
summarise(mean_raupc = mean(raupc)) %>%
group_by(village, same_module) %>%
summarise(raupc = mean(mean_raupc))
#plotting
raupc_g <- raupc_final %>%
group_by(village, same_module, host_group1, host_group2) %>%
summarise(mean_raupc = mean(raupc)) %>%
ggplot(aes(x=same_module, y=mean_raupc, fill=village)) +
geom_boxplot(outlier.shape = NA, alpha=0.8) +
geom_label(data = raupc_summary, aes(label = sprintf("%.2f", raupc), y = raupc), position = position_dodge(width = 0.75), size = 4, color="white",alpha=0.8, show.legend=F) +
theme_bw() +
scale_y_continuous(limits = c(0, 1), breaks = seq(0,1, by=0.2)) +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), panel.grid = element_blank()) +
scale_fill_manual(values=group.colors) +
labs(x="", y="Raup-Crick", fill="Village")
# plotting the final figure
p <- betaNTI_g + raupc_g
print(p)
cat('\n','\n')
# combining final results
assembly_final <- betaNTI_final %>%
left_join(raupc_final %>% select(host1,host2,raupc), by=c("host1","host2"))
# calculating the process
assembly_final %<>% mutate(process = case_when(betaNTI>2 ~ "Heterogeneous Selection",
betaNTI<(-2) ~ "Homogeneous Selection",
(betaNTI<=2 & betaNTI>=(-2) & raupc>0.95) ~ "Dispersal Limitation",
(betaNTI<=2 & betaNTI>=(-2) & raupc<(-0.95)) ~ "Homogenizing Dispersal",
.default = "Drift"))
# summary
assembly_summary <- assembly_final %>%
count(village, same_module, process)
#plotting
g <- assembly_summary %>%
ggplot(aes(fill=process, x=same_module, y=n)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="", y="Proportion")
print(g)
g <- data_asv_tax %>%
mutate(reads_a = reads*total_reads) %>%
group_by(village, grid, Famoly) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_village_grid, by=c("village","grid")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=Family, x=grid, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="Land Use", y="Relative abundance")
g <- data_asv_tax %>%
mutate(reads_a = reads*total_reads) %>%
group_by(village, grid, Family) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_village_grid, by=c("village","grid")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=Family, x=grid, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="Land Use", y="Relative abundance")
print(g)
View(tax_uni)
View(data_asv_tax)
tax_uni <- tax %>% filter(asv_ID %in% unique(data_asv$asv_ID)) %>%
count(Phylum,Family)
View(tax_uni)
g <- data_asv_tax %>%
filter(village=="Mandena") %>%
mutate(reads_a = reads*total_reads) %>%
group_by(village, grid, Phylum) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_village_grid, by=c("village","grid")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=Phylum, x=grid, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="Land Use", y="Relative abundance")
print(g)
g <- data_asv_tax %>%
filter(village=="Mandena") %>%
mutate(reads_a = reads*total_reads) %>%
group_by(village, grid, Family) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_village_grid, by=c("village","grid")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=Family, x=grid, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="Land Use", y="Relative abundance")
print(g)
View(data_asv_tax)
g <- data_asv_tax %>%
filter(village=="Mandena") %>%
mutate(reads_a = reads*total_reads) %>%
group_by(village, grid, Order) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_village_grid, by=c("village","grid")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=Order, x=grid, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~village) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="Land Use", y="Relative abundance")
print(g)
