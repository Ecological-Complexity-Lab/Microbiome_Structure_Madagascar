summarise(n = n_distinct(host_ID)) %>%
ungroup() %>%
slice_max(by = asv_core, order_by = n, n = 5, with_ties = FALSE) %>%
mutate(p = "top")
modules_top <- modules_table_three_groups %>%
left_join(largest_modules, by=c("asv_core","host_group")) %>%
mutate(module = factor(ifelse(is.na(p),"Other",host_group))) %>%
distinct(host_ID,host_group,asv_core, module)
total_reads_modules <-  modules_table_three_groups %>%
distinct(host_ID, asv_core, host_group, total_reads)  %>%
left_join(modules_top %>% distinct(asv_core,host_group,module), by=c("asv_core","host_group")) %>%
group_by(asv_core, module) %>% summarise(n_total = sum(total_reads))
most_abu_family_p <- data_asv_tax %>% left_join(modules_top, by=c("asv_core","host_ID")) %>%
mutate(reads_a = reads*total_reads) %>%
group_by(asv_core, Class, module) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_modules, by=c("asv_core","module")) %>%
mutate(n_p = n/n_total) %>%
left_join(most_abu_family_8, by=c("asv_core","Class")) %>%
mutate(p = case_when(p=="top" ~ Class,
is.na(Class) ~ ".NA",
is.na(p) ~ ".Other"))
library("RColorBrewer")
colors <- c("grey40","grey80","darkblue","#ffd60a",brewer.pal(n = 12, name = "Paired"))
g <- most_abu_family_p %>%
group_by(asv_core,module,  p) %>%
summarise(n_p = sum(n_p)) %>%
ggplot(aes(fill=p, x=module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core, scales = "free_x") +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14),
strip.text = element_text(size=12, color = 'black'),
panel.grid = element_blank(), panel.background = element_rect(colour = "black"), legend.key.size = unit(0.5, "cm")) +
scale_fill_manual(values=colors) +
labs(x="Module ID", y="Relative Abundance", fill = "Class")
print(g)
cat('\n','\n')
# a=modules_table_three_groups %>% filter(asv_core != "Rare") %>% mutate(module = factor(ifelse(host_group==1,1,0))) %>%
#   count(host_ID, asv_core, module) %>%
#   group_by(asv_core, module) %>%
#   summarise(avg_degree = mean(n), median_degree = median(n))
#
# modules_table_three_groups %>% filter(asv_core != "Rare") %>% mutate(module = factor(ifelse(host_group==1,1,0))) %>%
#   count(host_ID, asv_core, module) %>%
# ggplot(aes( x=module, y=n)) +
#   geom_boxplot()+
#   facet_wrap(~asv_core)+
#   theme_bw()
# relative abundance of the 10 most abundant Family of each group
# microbes taxonomy
tax <- read_delim("../../data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv") %>%
dplyr::rename(asv_ID = ASV)
data_asv_tax <- data_asv_p %>%
left_join(tax, by="asv_ID")
cat("## Relative abundance Family", '\n','\n')
total_reads_groups <- data_asv_tax %>% distinct(host_ID, asv_core, total_reads) %>% group_by(asv_core) %>% summarise(n_total = sum(total_reads))
most_abu_family <- data_asv_tax %>%
mutate(reads_a = reads*total_reads) %>%
group_by(asv_core, Phylum) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_groups, by="asv_core") %>%
mutate(n_p = n/n_total)
most_abu_family_8 <- most_abu_family %>%
filter(!is.na(Phylum)) %>%
ungroup() %>%
slice_max(by = asv_core, order_by = n_p, n = 8) %>%
mutate(p = "top") %>%
select(asv_core, Phylum, p)
largest_modules <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ungroup() %>%
slice_max(by = asv_core, order_by = n, n = 5, with_ties = FALSE) %>%
mutate(p = "top")
modules_top <- modules_table_three_groups %>%
left_join(largest_modules, by=c("asv_core","host_group")) %>%
mutate(module = factor(ifelse(is.na(p),"Other",host_group))) %>%
distinct(host_ID,host_group,asv_core, module)
total_reads_modules <-  modules_table_three_groups %>%
distinct(host_ID, asv_core, host_group, total_reads)  %>%
left_join(modules_top %>% distinct(asv_core,host_group,module), by=c("asv_core","host_group")) %>%
group_by(asv_core, module) %>% summarise(n_total = sum(total_reads))
most_abu_family_p <- data_asv_tax %>% left_join(modules_top, by=c("asv_core","host_ID")) %>%
mutate(reads_a = reads*total_reads) %>%
group_by(asv_core, Phylum, module) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_modules, by=c("asv_core","module")) %>%
mutate(n_p = n/n_total) %>%
left_join(most_abu_family_8, by=c("asv_core","Phylum")) %>%
mutate(p = case_when(p=="top" ~ Phylum,
is.na(Phylum) ~ ".NA",
is.na(p) ~ ".Other"))
library("RColorBrewer")
colors <- c("grey40","grey80","darkblue","#ffd60a",brewer.pal(n = 12, name = "Paired"))
g <- most_abu_family_p %>%
group_by(asv_core,module,  p) %>%
summarise(n_p = sum(n_p)) %>%
ggplot(aes(fill=p, x=module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core, scales = "free_x") +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14),
strip.text = element_text(size=12, color = 'black'),
panel.grid = element_blank(), panel.background = element_rect(colour = "black"), legend.key.size = unit(0.5, "cm")) +
scale_fill_manual(values=colors) +
labs(x="Module ID", y="Relative Abundance", fill = "Phylum")
print(g)
cat('\n','\n')
# a=modules_table_three_groups %>% filter(asv_core != "Rare") %>% mutate(module = factor(ifelse(host_group==1,1,0))) %>%
#   count(host_ID, asv_core, module) %>%
#   group_by(asv_core, module) %>%
#   summarise(avg_degree = mean(n), median_degree = median(n))
#
# modules_table_three_groups %>% filter(asv_core != "Rare") %>% mutate(module = factor(ifelse(host_group==1,1,0))) %>%
#   count(host_ID, asv_core, module) %>%
# ggplot(aes( x=module, y=n)) +
#   geom_boxplot()+
#   facet_wrap(~asv_core)+
#   theme_bw()
source("../modularity_analysis_functions.R", local = knitr::knit_global())
# reading the microbiome data
# working only with Rattus from the three villages
# villages: Andatsakala, Mandena, Sarahandrano
data_asv <- read_csv("../../data/data_processed/microbiome/data_asv_rra0.001_p0.01_th5000_all.csv")
# first of all, run this chunk of code.
# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_th <- c(0.3)
data_asv_p <- data_asv %>%
mutate(asv_core = case_when(host_p>core_th ~ "Core",
.default = "Non-core"))
#data_asv_all <- data_asv %>% mutate(asv_core = "All")
#data_asv_final <- rbind(data_asv_all, data_asv_p)
group.colors <- c(Core = "#d95f02", 'Non-core' = "#034e7b", Rare = "#2b9348", All = "black")
#group.colors <- c(Core = "#e76f51", Non_core = "#2b9348", Rare = "#0077b6")
core_names <- unique(data_asv_p$asv_core)
nmi_observed_three_groups <- NULL
modules_similarity_three_groups <- NULL
modules_similarity2_three_groups <- NULL
asv_degree_distribution_three_groups <- NULL
modules_three_groups <- NULL
modules_size_three_groups <- NULL
modules_grid_three_groups <- NULL
modules_table_three_groups <- NULL
betaNTI_three_groups <- NULL
raupc_three_groups <- NULL
assembly_three_groups <- NULL
# reading the phylogenetic tree
best_tree <- readRDS(file = "../../results/phylo_tree_rra0.001_p0.01.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
# loop for three groups
for (v in core_names) {
data_asv_group <- data_asv_p %>%
filter(asv_core == v)
# calculating ASVs degree
asv_degree <- data_asv_group %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
dplyr::rename(asv_degree = n)
data_asv_group %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_group)
modules_table_three_groups <- rbind(modules_table_three_groups, modules_observed)
#write_csv(modules_table_three_groups, "../results/modules_table_sarahandrano.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_groups <- append(modules_similarity_three_groups, modules_similarity)
# calculating similarity in modules between grids-seasons
modules_similarity2 <- fun_modules_similarity2(modules_observed %>% filter((host_group!=1 & asv_core!="Rare") | asv_core=="Rare"))
#%>% filter((host_group!=1 & asv_core!="Rare") | asv_core=="Rare")
# saving results in one table
modules_similarity2_three_groups <- append(modules_similarity2_three_groups, modules_similarity2)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_group)
asv_degree_distribution_three_groups <- append(asv_degree_distribution_three_groups, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed, v)
modules_three_groups <- append(modules_three_groups, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_groups <- append(modules_size_three_groups, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_groups <- append(modules_grid_three_groups, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_groups <- append(nmi_observed_three_groups, nmi_observed)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_group %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_group$host_ID)))
data_assembly <- data_asv_group %>%
mutate(reads=1) %>%
distinct(host_ID, asv_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
asv_distance2 <- asv_distance[rownames(asv_distance)%in%asv_pool$asv_ID , colnames(asv_distance)%in%asv_pool$asv_ID]
raupc <- as.matrix(raupcrick(data_assembly, nsimul = 3))
assembly <- iCAMP::qpen(data_assembly, pd = asv_distance2, RC=raupc, rand=3, sig.bNTI = 2, sig.rc = 0.95, ab.weight=F, nworker = 4)
assembly_result <- assembly$result %>%
mutate(sample1 = as.double(sample1), sample2 = as.double(sample2)) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(asv_core = v)
assembly_three_groups <- rbind(assembly_three_groups, assembly_result)
# # calculating betaNTI
# data_betaNTI <- data_asv_group %>%
#   distinct(host_ID, asv_ID) %>%
#   mutate(reads = 1) %>%
#   spread(asv_ID, reads, fill = 0) %>%
#   column_to_rownames("host_ID") %>%
#   as.matrix()
#
# betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool, n_phylo_shuff) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
#   mutate(asv_core = v)
# betaNTI_three_groups <- rbind(betaNTI_three_groups, betaNTI)
#
# # raup-crick
#
# raupc <- iCAMP::RC.pc(data_raupc, taxo.metric="bray", rand=100, weighted=TRUE, dirichlet=F, nworker = 4)
#
# raupc <- raupcrick(data_betaNTI)
# raupc2 <- as.matrix(raupc)
# raupc2[upper.tri(raupc2)] <- NA
# diag(raupc2) <- NA
# raupc2_m <- melt(raupc2) %>%
#   filter(!(is.na(value)))%>%
#   dplyr::rename(host1 = Var1, host2 = Var2, raupc = value) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
#   mutate(asv_core = v)
# raupc_three_groups <- rbind(raupc_three_groups, raupc2_m)
}
# relative abundance of the 10 most abundant Family of each group
# microbes taxonomy
tax <- read_delim("../../data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv") %>%
dplyr::rename(asv_ID = ASV)
data_asv_tax <- data_asv_p %>%
left_join(tax, by="asv_ID")
cat("## Relative abundance Family", '\n','\n')
total_reads_groups <- data_asv_tax %>% distinct(host_ID, asv_core, total_reads) %>% group_by(asv_core) %>% summarise(n_total = sum(total_reads))
most_abu_family <- data_asv_tax %>%
mutate(reads_a = reads*total_reads) %>%
group_by(asv_core, Family) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_groups, by="asv_core") %>%
mutate(n_p = n/n_total)
most_abu_family_8 <- most_abu_family %>%
filter(!is.na(Family)) %>%
ungroup() %>%
slice_max(by = asv_core, order_by = n_p, n = 8) %>%
mutate(p = "top") %>%
select(asv_core, Family, p)
largest_modules <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ungroup() %>%
slice_max(by = asv_core, order_by = n, n = 5, with_ties = FALSE) %>%
mutate(p = "top")
modules_top <- modules_table_three_groups %>%
left_join(largest_modules, by=c("asv_core","host_group")) %>%
mutate(module = factor(ifelse(is.na(p),"Other",host_group))) %>%
distinct(host_ID,host_group,asv_core, module)
total_reads_modules <-  modules_table_three_groups %>%
distinct(host_ID, asv_core, host_group, total_reads)  %>%
left_join(modules_top %>% distinct(asv_core,host_group,module), by=c("asv_core","host_group")) %>%
group_by(asv_core, module) %>% summarise(n_total = sum(total_reads))
most_abu_family_p <- data_asv_tax %>% left_join(modules_top, by=c("asv_core","host_ID")) %>%
mutate(reads_a = reads*total_reads) %>%
group_by(asv_core, Family, module) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_modules, by=c("asv_core","module")) %>%
mutate(n_p = n/n_total) %>%
left_join(most_abu_family_8, by=c("asv_core","Family")) %>%
mutate(p = case_when(p=="top" ~ Family,
is.na(Family) ~ ".NA",
is.na(p) ~ ".Other"))
library("RColorBrewer")
colors <- c("grey40","grey80","darkblue","#ffd60a",brewer.pal(n = 12, name = "Paired"))
g <- most_abu_family_p %>%
group_by(asv_core,module,  p) %>%
summarise(n_p = sum(n_p)) %>%
ggplot(aes(fill=p, x=module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core, scales = "free_x") +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14),
strip.text = element_text(size=12, color = 'black'),
panel.grid = element_blank(), panel.background = element_rect(colour = "black"), legend.key.size = unit(0.5, "cm")) +
scale_fill_manual(values=colors) +
labs(x="Module ID", y="Relative Abundance", fill = "Family")
print(g)
cat('\n','\n')
# a=modules_table_three_groups %>% filter(asv_core != "Rare") %>% mutate(module = factor(ifelse(host_group==1,1,0))) %>%
#   count(host_ID, asv_core, module) %>%
#   group_by(asv_core, module) %>%
#   summarise(avg_degree = mean(n), median_degree = median(n))
#
# modules_table_three_groups %>% filter(asv_core != "Rare") %>% mutate(module = factor(ifelse(host_group==1,1,0))) %>%
#   count(host_ID, asv_core, module) %>%
# ggplot(aes( x=module, y=n)) +
#   geom_boxplot()+
#   facet_wrap(~asv_core)+
#   theme_bw()
source("../modularity_analysis_functions.R", local = knitr::knit_global())
# reading the microbiome data
# working only with Rattus from the three villages
# villages: Andatsakala, Mandena, Sarahandrano
data_asv <- read_csv("../../data/data_processed/microbiome/data_asv_rra0.001_p0.01_th5000_all.csv")
# first of all, run this chunk of code.
# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_th <- c(0.4)
data_asv_p <- data_asv %>%
mutate(asv_core = case_when(host_p>core_th ~ "Core",
.default = "Non-core"))
#data_asv_all <- data_asv %>% mutate(asv_core = "All")
#data_asv_final <- rbind(data_asv_all, data_asv_p)
group.colors <- c(Core = "#d95f02", 'Non-core' = "#034e7b", Rare = "#2b9348", All = "black")
#group.colors <- c(Core = "#e76f51", Non_core = "#2b9348", Rare = "#0077b6")
core_names <- unique(data_asv_p$asv_core)
nmi_observed_three_groups <- NULL
modules_similarity_three_groups <- NULL
modules_similarity2_three_groups <- NULL
asv_degree_distribution_three_groups <- NULL
modules_three_groups <- NULL
modules_size_three_groups <- NULL
modules_grid_three_groups <- NULL
modules_table_three_groups <- NULL
betaNTI_three_groups <- NULL
raupc_three_groups <- NULL
assembly_three_groups <- NULL
# reading the phylogenetic tree
best_tree <- readRDS(file = "../../results/phylo_tree_rra0.001_p0.01.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
# loop for three groups
for (v in core_names) {
data_asv_group <- data_asv_p %>%
filter(asv_core == v)
# calculating ASVs degree
asv_degree <- data_asv_group %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
dplyr::rename(asv_degree = n)
data_asv_group %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_group)
modules_table_three_groups <- rbind(modules_table_three_groups, modules_observed)
#write_csv(modules_table_three_groups, "../results/modules_table_sarahandrano.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_groups <- append(modules_similarity_three_groups, modules_similarity)
# calculating similarity in modules between grids-seasons
modules_similarity2 <- fun_modules_similarity2(modules_observed %>% filter((host_group!=1 & asv_core!="Rare") | asv_core=="Rare"))
#%>% filter((host_group!=1 & asv_core!="Rare") | asv_core=="Rare")
# saving results in one table
modules_similarity2_three_groups <- append(modules_similarity2_three_groups, modules_similarity2)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_group)
asv_degree_distribution_three_groups <- append(asv_degree_distribution_three_groups, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed, v)
modules_three_groups <- append(modules_three_groups, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_groups <- append(modules_size_three_groups, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_groups <- append(modules_grid_three_groups, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_groups <- append(nmi_observed_three_groups, nmi_observed)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_group %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_group$host_ID)))
data_assembly <- data_asv_group %>%
mutate(reads=1) %>%
distinct(host_ID, asv_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
asv_distance2 <- asv_distance[rownames(asv_distance)%in%asv_pool$asv_ID , colnames(asv_distance)%in%asv_pool$asv_ID]
raupc <- as.matrix(raupcrick(data_assembly, nsimul = 3))
assembly <- iCAMP::qpen(data_assembly, pd = asv_distance2, RC=raupc, rand=3, sig.bNTI = 2, sig.rc = 0.95, ab.weight=F, nworker = 4)
assembly_result <- assembly$result %>%
mutate(sample1 = as.double(sample1), sample2 = as.double(sample2)) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(asv_core = v)
assembly_three_groups <- rbind(assembly_three_groups, assembly_result)
# # calculating betaNTI
# data_betaNTI <- data_asv_group %>%
#   distinct(host_ID, asv_ID) %>%
#   mutate(reads = 1) %>%
#   spread(asv_ID, reads, fill = 0) %>%
#   column_to_rownames("host_ID") %>%
#   as.matrix()
#
# betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool, n_phylo_shuff) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
#   mutate(asv_core = v)
# betaNTI_three_groups <- rbind(betaNTI_three_groups, betaNTI)
#
# # raup-crick
#
# raupc <- iCAMP::RC.pc(data_raupc, taxo.metric="bray", rand=100, weighted=TRUE, dirichlet=F, nworker = 4)
#
# raupc <- raupcrick(data_betaNTI)
# raupc2 <- as.matrix(raupc)
# raupc2[upper.tri(raupc2)] <- NA
# diag(raupc2) <- NA
# raupc2_m <- melt(raupc2) %>%
#   filter(!(is.na(value)))%>%
#   dplyr::rename(host1 = Var1, host2 = Var2, raupc = value) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
#   mutate(asv_core = v)
# raupc_three_groups <- rbind(raupc_three_groups, raupc2_m)
}
# relative abundance of the 10 most abundant Family of each group
# microbes taxonomy
tax <- read_delim("../../data/data_raw/data_microbiome/ASVs_taxonomy_new.tsv") %>%
dplyr::rename(asv_ID = ASV)
data_asv_tax <- data_asv_p %>%
left_join(tax, by="asv_ID")
cat("## Relative abundance Family", '\n','\n')
total_reads_groups <- data_asv_tax %>% distinct(host_ID, asv_core, total_reads) %>% group_by(asv_core) %>% summarise(n_total = sum(total_reads))
most_abu_family <- data_asv_tax %>%
mutate(reads_a = reads*total_reads) %>%
group_by(asv_core, Family) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_groups, by="asv_core") %>%
mutate(n_p = n/n_total)
most_abu_family_8 <- most_abu_family %>%
filter(!is.na(Family)) %>%
ungroup() %>%
slice_max(by = asv_core, order_by = n_p, n = 8) %>%
mutate(p = "top") %>%
select(asv_core, Family, p)
largest_modules <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ungroup() %>%
slice_max(by = asv_core, order_by = n, n = 5, with_ties = FALSE) %>%
mutate(p = "top")
modules_top <- modules_table_three_groups %>%
left_join(largest_modules, by=c("asv_core","host_group")) %>%
mutate(module = factor(ifelse(is.na(p),"Other",host_group))) %>%
distinct(host_ID,host_group,asv_core, module)
total_reads_modules <-  modules_table_three_groups %>%
distinct(host_ID, asv_core, host_group, total_reads)  %>%
left_join(modules_top %>% distinct(asv_core,host_group,module), by=c("asv_core","host_group")) %>%
group_by(asv_core, module) %>% summarise(n_total = sum(total_reads))
most_abu_family_p <- data_asv_tax %>% left_join(modules_top, by=c("asv_core","host_ID")) %>%
mutate(reads_a = reads*total_reads) %>%
group_by(asv_core, Family, module) %>%
summarise(n= sum(reads_a)) %>%
left_join(total_reads_modules, by=c("asv_core","module")) %>%
mutate(n_p = n/n_total) %>%
left_join(most_abu_family_8, by=c("asv_core","Family")) %>%
mutate(p = case_when(p=="top" ~ Family,
is.na(Family) ~ ".NA",
is.na(p) ~ ".Other"))
library("RColorBrewer")
colors <- c("grey40","grey80","darkblue","#ffd60a",brewer.pal(n = 12, name = "Paired"))
g <- most_abu_family_p %>%
group_by(asv_core,module,  p) %>%
summarise(n_p = sum(n_p)) %>%
ggplot(aes(fill=p, x=module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core, scales = "free_x") +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14),
strip.text = element_text(size=12, color = 'black'),
panel.grid = element_blank(), panel.background = element_rect(colour = "black"), legend.key.size = unit(0.5, "cm")) +
scale_fill_manual(values=colors) +
labs(x="Module ID", y="Relative Abundance", fill = "Family")
print(g)
cat('\n','\n')
# a=modules_table_three_groups %>% filter(asv_core != "Rare") %>% mutate(module = factor(ifelse(host_group==1,1,0))) %>%
#   count(host_ID, asv_core, module) %>%
#   group_by(asv_core, module) %>%
#   summarise(avg_degree = mean(n), median_degree = median(n))
#
# modules_table_three_groups %>% filter(asv_core != "Rare") %>% mutate(module = factor(ifelse(host_group==1,1,0))) %>%
#   count(host_ID, asv_core, module) %>%
# ggplot(aes( x=module, y=n)) +
#   geom_boxplot()+
#   facet_wrap(~asv_core)+
#   theme_bw()
