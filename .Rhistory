c$signif
c$mcletters
tuk_shannon$vcov
tuk_shannon$linfct
shannon_grid
summary(shannon_grid)
unlink("GitHub/Small_Mammals_Microbiome/grid_modularity_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png'), out.width = '100%', out.height='40%')
library(tidyverse)
library(magrittr)
library(ggplot2)
library(vegan)
library(igraph)
library(blockmodels)
library(ape)
library(phangorn)
library(reshape2)
library(infomapecology)
library(aricode)
rm(list=ls())
# reading ASV data
data_asv <- read_csv("data_processed/three_villages/data_asv_0.01.csv")
data_asv %<>% filter(host_species == "Rattus rattus" & village == "Mandena")
# changing to 7 grids
full_grids <- read_csv("data_processed/three_villages/data_SM.csv") %>% dplyr::select(host_ID, grid)
data_asv %<>% dplyr::select(-grid) %>% left_join(full_grids, by="host_ID")
n_asv <- data_asv %>%
count(asv_ID) %>%
filter(n<10)
# #
#data_asv %<>% filter(asv_ID %in% n_asv$asv_ID)
data_asv_mat <- data_asv %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
# Latent Block Model
model <- blockmodels::BM_bernoulli(data_asv_mat, membership_type = "LBM", verbosity=0, plotting="")
#model <- blockmodels::BM_bernoulli(data_asv_mat, membership_type = "LBM", exploration_direction = c(10,10), exploration_factor = 10, explore_min = 1, explore_max = 100)
model$estimate()
# the best model
b <- which.max(model$ICL)
memb_host <- as.data.frame(model$memberships[[b]]$Z1)
memb_asv <- as.data.frame(model$memberships[[b]]$Z2)
# attaching hosts and ASVs IDs
host_names <- rownames(data_asv_mat)
asv_names <- colnames(data_asv_mat)
memb_host %<>% mutate(host_group = max.col(.,'first')) %>% mutate(host_ID = as.numeric(host_names))
memb_asv %<>% mutate(asv_group = max.col(.,'first')) %>% mutate(asv_ID = asv_names)
# matching host group to ASV group
data_asv %<>% left_join(memb_host %>% dplyr::select(host_ID,host_group), by = "host_ID") %>%
left_join(memb_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID")
#write_csv(data_asv, "data_processed/three_villages/data_asv_0.01_rattus_mandena_groups.csv")
cat("## Hosts", '\n')
print(knitr::kable(head(memb_host)))
cat('\n','\n')
cat("## ASVs", '\n')
print(knitr::kable(head(memb_asv)))
cat('\n','\n')
cat("## Plot", '\n')
print(model$memberships[[b]]$plot())
cat('\n','\n')
hosts <- data_asv %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::NMI(hosts$grid, hosts$host_group)
nmi_shuff <- vector(length = 1000)
for(i in 1:1000) {
# shuffling the grid attribute
hosts_shuff <- hosts %>%
mutate(grid = sample(grid,nrow(hosts)))
# calculating nmi
nmi_shuff[i] <- aricode::NMI(hosts_shuff$grid, hosts_shuff$host_group)
}
# plotting
p <- length(nmi_shuff[nmi_shuff>nmi_obs]) / length(nmi_shuff)
g <- as.data.frame(nmi_shuff) %>%
ggplot(aes(nmi_shuff)) +
geom_histogram() +
theme_bw() +
geom_vline(xintercept = nmi_obs, linetype='dashed', color="red") +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20)) +
labs(x="NMI", y="No. of Shuffled Networks")+
annotate("text", x=max(nmi_shuff), y=100, label=paste('p-value =',p))
ggsave("nmi_host_grid.pdf", path = "LBM_analysis_new_files", device = "pdf")
print(g)
cat('\n','\n')
ggsave("nmi_host_grid.pdf", path = "LBM_analysis_new_files", device = "pdf")
print(g)
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png'), out.width = '100%', out.height='40%')
library(tidyverse)
library(magrittr)
library(ggplot2)
library(vegan)
library(igraph)
library(reshape2)
library(infomapecology)
library(aricode)
rm(list=ls())
# reading ASV data
data_asv <- read_csv("data_processed/three_villages/data_asv_0.01_grids2.csv")
data_asv %<>% filter((host_species == "Rattus rattus" | host_species == "Microgale brevicaudata") & village == "Mandena") %>%
mutate(grid = factor(grid, levels = c("semi-intact_forest","secondary_forest","brushy_regrowth","agriculture","flooded_rice","agroforest","village")))
n_asv <- data_asv %>%
count(asv_ID) %>%
filter(n<3)
#
#data_asv %<>% filter(asv_ID %in% n_asv$asv_ID)
#data_asv_mat <- data_asv %>%
#  spread(asv_ID, reads, fill = 0) %>%
#  mutate(across(starts_with("ASV"), ~.*unfiltered_reads)) %>%
#  mutate(total_reads = select(.,starts_with("ASV")) %>% rowSums(na.rm = TRUE)) %>%
#  mutate(across(starts_with("ASV"), ~./total_reads)) %>%
#  gather("asv_ID", "reads", starts_with("ASV")) %>%
#  filter(reads>0)
#data_mammals <- read_csv("data_raw/Terrestrial_Mammals.csv")
#data_mammals %<>% mutate(host_ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", animal_id))) %>%
#  mutate(dist_village = as.numeric(gsub(".*?([0-9,.]+).*", "\\1", dist_village_center))) %>%
#  select(host_ID, dist_village)
#full_grids <- read_csv("data_processed/three_villages/data_SM.csv") %>% dplyr::select(host_ID, grid) %>%
#  left_join(data_mammals, by="host_ID")
#data_asv %<>% dplyr::select(-grid) %>%left_join(full_grids, by="host_ID") %>%
#  mutate(dist_village = ifelse(grid=="village",0,dist_village))
#write_csv(data_asv_mat, "data_processed/three_villages/data_asv_0.01_grids2.csv")
# distance between grids
grid_dist_avg <- data_asv %>%
distinct(host_ID, grid, dist_village) %>%
group_by(grid) %>%
summarise(distance = mean(dist_village))
data_asv_mat <- data_asv %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
s="Rattus rattus"
data_asv_s <- data_asv %>% filter(host_species==s)
data_asv_mat <- data_asv_s %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
# building the network
network_object <- infomapecology::create_monolayer_object(data_asv_mat, directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_asv <- infomap_object$modules %>% filter(node_group == "ASV")%>% dplyr::rename(asv_group = module_level1, asv_ID = node_name)
modules_host <- infomap_object$modules %>% filter(node_group == "Host")%>% dplyr::rename(host_group = module_level1, host_ID = node_name) %>% mutate(host_ID = as.numeric(host_ID))
data_asv_s %<>% left_join(modules_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID") %>%
left_join(modules_host %>% dplyr::select(host_ID,host_group), by = "host_ID")
View(data_asv_s)
View(modules_asv)
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n= n_distinct(grid))
View(n_module_grid)
n_asv <- data_asv_s %>%
count(asv_ID)
View(n_asv)
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n_grid = n_distinct(grid))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,.))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,n))
n_asv %>%
ggplot(aes(x=as.factor(n), y=n_grid, fill=as.factor(n))) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="Host Species", y="Microbiome Similarity [Jaccard]")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = as.factor(n, levels = c("1-4","5-9","10+")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = factor(n, levels = c("1-4","5-9","10+")))
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Degree", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png','pdf'), out.width = '100%', out.height='40%')
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
library(tidyverse)
library(magrittr)
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
View(data_asv)
library(tidyverse)
library(magrittr)
library(ggplot2)
library(vegan)
library(igraph)
library(reshape2)
library(infomapecology)
library(aricode)
library(cowplot)
final_data <- read_csv("data/data_processed/final_modularity_data.csv")
setwd("~/GitHub/Microbiome_Structure_Madagascar")
final_data <- read_csv("data/data_processed/final_modularity_data.csv")
library(nlme)
full_model <- lme(module_similarity ~ grid_attr + grid_dist + sm_community, random=~1|village, data = final_data, na.action = na.fail)
# checking VIF
# as a rule of thumb, VIF< 10 for a variable is fine
library(car)
car::vif(full_model)
# AIC
library(MuMIn)
dredge_modules_similarity <- MuMIn::dredge(full_model)
?lme
full_model <- lme(module_similarity ~ grid_attr + grid_dist + sm_community, random=~1|village, data = final_data, method = "ML", na.action = na.fail)
car::vif(full_model)
dredge_modules_similarity <- MuMIn::dredge(full_model)
View(dredge_modules_similarity)
# The best models: delta <= 10
results_modules_similarity <- subset(dredge_modules_similarity, delta <= 10 | df == 3 | df == max(df), recalc.weights = FALSE)
row.names(results_modules_similarity) <- c(1:(nrow(results_modules_similarity)))
View(results_modules_similarity)
summary(fu)
summary(full_model)
##### plotting the regression
# grid attributes
final_data %>%
ggplot(aes(y=module_similarity, x=grid_attr, color=village)) +
geom_point(alpha = 0.8) +
geom_smooth(method = "glm", se=F, method.args = list(family = "gaussian")) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14), strip.text.x = element_text(size=12)) +
labs(x = "Grids Attributes Similarity [Bray-Curtis]", y = "Modules Similarity [Bray-Curtis]")
# grid distance
final_data %>%
ggplot(aes(y=module_similarity, x=grid_dist, color=village)) +
geom_point(alpha = 0.8) +
geom_smooth(method = "glm", se=F, method.args = list(family = "gaussian")) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14), strip.text.x = element_text(size=12)) +
labs(x = "Distance Between Grids [Log(m)]", y = "Modules Similarity [Bray-Curtis]")
library(fitdistrplus)
fitdist(final_data$module_similarity, "beta")
a=fitdist(final_data$module_similarity, "beta")
plot(a)
a=fitdistr(final_data$module_similarity, "beta")
?fitdistr
?fitdist
a=fitdist(final_data$module_similarity, "beta")
coef(a)
library(lme4)
?glmer
install.packages("glmmTMB")
library(glmmTMB)
full_model <- glmmTMB::glmmTMB(module_similarity ~ grid_attr + grid_dist + sm_community + (1|village), data = final_data, REML = F, na.action = na.fail, family = "beta")
full_model <- glmmTMB::glmmTMB(module_similarity ~ grid_attr + grid_dist + sm_community + (1|village), data = final_data, REML = F, na.action = na.fail, family = beta_family())
full_model <- glmmTMB::glmmTMB(module_similarity ~ grid_attr + grid_dist + sm_community + (1|village), data = final_data, REML = F, na.action = na.fail, family = beta_family())
shapiro.test(final_data$module_similarity)
#library(fitdistrplus)
#a=fitdist(final_data$module_similarity, "beta")
#plot(a)
qqPlot(final_data$grid_attr)
a=fitdist(final_data$module_similarity, "norm")
plot(a)
#library(fitdistrplus)
#a=fitdist(final_data$module_similarity, "norm")
b=fitdist(final_data$module_similarity, "beta")
plot(b)
anova(a,b)
a$estimate
a$aic
b$aic
# Relative importance
imp <- as.data.frame(MuMIn::sw(dredge_modules_similarity))
View(imp)
# Relative importance
imp <- importance(dredge_modules_similarity)
# variables importance
imp <- as.data.frame(MuMIn::sw(dredge_modules_similarity))
var_names <- rownames(imp)
imp_values <- as.vector(imp[[1]])
# Plotting
barplot(imp_values, names.arg=var_names, ylab = "Importance", ylim = c(0,1))
rm(list=ls())
# reading microbiome data
data_asv <- read_csv("data/data_processed/microbiome/data_asv_rra0.01_th1000.csv") %>%
filter(host_species == "Rattus rattus" & grid!="village")
View(data_asv)
# function for finding modules
fun_modularity_analysis <- function(dat) {
# input: dat = ASV data in long format
# output: adding two columns to the input table: "asv_group" and "host_group"
# transforming to matrix
data_asv_mat <- dat %>% select(-asv_degree) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
# building the network
network_object <- infomapecology::create_monolayer_object(data_asv_mat, directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_asv <- infomap_object$modules %>% filter(node_group == "ASV")%>% dplyr::rename(asv_group = module_level1, asv_ID = node_name)
modules_host <- infomap_object$modules %>% filter(node_group == "Host")%>% dplyr::rename(host_group = module_level1, host_ID = node_name) %>% mutate(host_ID = as.numeric(host_ID))
dat %<>% left_join(modules_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID") %>%
left_join(modules_host %>% dplyr::select(host_ID,host_group), by = "host_ID")
return(dat)
}
# function for calculating NMI between the host's group and the host's grid and calculating p value for the value
fun_nmi_calc <- function(dat, figure) {
# input: dat = ASV data in long format, figure = print the figure? (T/F)
# output: data frame with observed NMI value and p value, if figure=T a figure of shuffled nmi distribution
hosts <- dat %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::NMI(hosts$grid, hosts$host_group)
nmi_shuff <- vector(length = 1000)
for(i in 1:1000) {
# shuffling the grid attribute
hosts_shuff <- hosts %>%
mutate(grid = sample(grid,nrow(hosts)))
# calculating nmi
nmi_shuff[i] <- aricode::NMI(hosts_shuff$grid, hosts_shuff$host_group)
}
# calculating p value
p <- length(nmi_shuff[nmi_shuff>nmi_obs]) / length(nmi_shuff)
# plotting
if(figure){
g <- as.data.frame(nmi_shuff) %>%
ggplot(aes(nmi_shuff)) +
geom_histogram() +
theme_bw() +
geom_vline(xintercept = nmi_obs, linetype='dashed', color="red") +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20)) +
labs(x="NMI", y="No. of Shuffled Networks")
} else {
g <- NULL
}
nmi_summary <- tibble(nmi = nmi_obs,
p = p)
return(list(nmi_summary, g))
}
# calculating NMI for different values of core microbiome
# core microbiome = the number of hosts the asv infects (asv's degree)
fun_modularity_diff_core <- function(dat, nmi_observed, cor_seq) {
#####
# running for core microbiome
nmi_summary_core <- NULL
for (i in core_seq) {
# filtering out ASVs with lower degree than the threshold
data_asv_filtered_core <- dat %>% filter(asv_degree >= i)
# modularity
modules <- fun_modularity_analysis(data_asv_filtered_core)
# NMI
nmi_mid <- fun_nmi_calc(modules, FALSE)
nmi_mid <- nmi_mid[[1]] %>%
mutate(degree = i, type = "core", sig = ifelse(p <= 0.05, 1, 0))
nmi_summary_core <- rbind(nmi_summary_core, nmi_mid)
}
#####
# running for non-core microbiome
nmi_summary_noncore <- NULL
for (j in core_seq) {
# filtering out ASVs with lower degree than the threshold
data_asv_filtered_noncore <- dat %>% filter(asv_degree <= j)
# modularity
modules <- fun_modularity_analysis(data_asv_filtered_noncore)
# NMI
nmi_mid <- fun_nmi_calc(modules, FALSE)
nmi_mid <- nmi_mid[[1]] %>%
mutate(degree = j, type = "non-core", sig = ifelse(p <= 0.05, 1, 0))
nmi_summary_noncore <- rbind(nmi_summary_noncore, nmi_mid)
}
#####
# plotting the results
#nmi_summary <- rbind(nmi_summary_core, nmi_summary_noncore)
p1 <- nmi_summary_core %>%
ggplot(aes(x=degree, y=nmi)) +
geom_point(color = "blue") +
geom_line(color = "blue") +
geom_hline(yintercept = nmi_observed[[1]]$nmi, linetype = "dashed") +
scale_y_continuous(limits = c(0, 0.35)) +
scale_x_continuous(limits = c(0, 15)) +
theme_bw() +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 14), legend.position = "none", plot.title = element_text(hjust = 0.5)) +
labs(title = "Core Microbes", x="Minimum ASVs Degree", y="Normalized Mutual Information (NMI)")
p2 <- nmi_summary_noncore %>%
ggplot(aes(x=degree, y=nmi)) +
geom_point(color = "red") +
geom_line(color="red") +
geom_hline(yintercept = nmi_observed[[1]]$nmi, linetype = "dashed") +
scale_y_continuous(limits = c(0, 0.35)) +
scale_x_continuous(limits = c(0, 15)) +
theme_bw() +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 14), legend.position = "none",plot.title = element_text(hjust = 0.5)) +
labs(title = "Non-Core Microbes", x="Maximum ASVs Degree", y="Normalized Mutual Information (NMI)")
p3 <- cowplot::plot_grid(p1,p2)
final_figs <- list(p3)
return(final_figs)
}
# function for calculating similarity in modules between grids
fun_modules_similarity <- function(dat) {
# matrix of grid similarity in modules
grid_modules <- dat %>%
group_by(grid, host_group) %>%
summarise(host_n = n_distinct(host_ID)) %>%
spread(host_group, host_n, fill = 0) %>%
mutate(grid = as.character(grid)) %>%
arrange(grid) %>%
column_to_rownames("grid") %>%
as.matrix()
# calculating the *similarity* between grids
grid_modules_dist <- as.matrix(1-vegdist(sqrt(grid_modules), method = "bray"))
# transforming to long format
grid_mudules_dist_m <- grid_modules_dist
grid_mudules_dist_m[lower.tri(grid_mudules_dist_m)] <- NA
diag(grid_mudules_dist_m) <- NA
grid_mudules_dist_m <- melt(grid_mudules_dist_m) %>%
filter(!is.na(value)) %>%
dplyr::rename(grid1 = Var2, grid2 = Var1, module_similarity = value)
return(grid_mudules_dist_m)
}
# setting thresholds for core
core_seq <- seq(1:5)
village_names <- unique(data_asv$village)
nmi_observed_three_villages <- NULL
nmi_diff_core_three_villages <- NULL
modules_similarity_three_villages <- NULL
# for loop for three villages
for (v in village_names) {
data_asv_village <- data_asv %>%
filter(village == v)
# calculating ASVs degree
asv_degree <- data_asv_village %>%
count(asv_ID) %>%
rename(asv_degree = n)
data_asv_village %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_village)
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed) %>%
mutate(village = v)
# saving results in one table
modules_similarity_three_villages <- rbind(modules_similarity_three_villages, modules_similarity)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_villages <- append(nmi_observed_three_villages, nmi_observed)
##### NMI for different values of core microbiome
# calling the function
nmi_diff_core <- fun_modularity_diff_core(data_asv_village, nmi_observed, core_seq)
# saving results in one list
nmi_diff_core_three_villages <- append(nmi_diff_core_three_villages, nmi_diff_core)
}
?select
detach("package:MASS", unload = TRUE)
