scale_y_continuous(limits = c(0, 60)) +
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(45,55,50), tip_length = 0) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Modules per Land Use")
print(g3)
cat('\n','\n')
g3 <- modules_per_grid %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.7) +
geom_jitter(color="black", size=2) +
theme_classic() +
scale_y_continuous(limits = c(0, 60)) +
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(45,55,50), tip_length = 0) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Modules per Land Use")
print(g3)
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(n_p*100,1),"%")),
position = position_stack(vjust = 0.5), size = 3)+
theme_classic() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
scale_fill_manual(values=c("#adc178","#d6ccc2","#f07167","#83c5be")) +
labs(x="", y="Percentage")
print(g)
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(n_p*100,1),"%")),
position = position_stack(vjust = 0.5), size = 3)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
scale_fill_manual(values=c("#adc178","#d6ccc2","#f07167","#83c5be")) +
labs(x="", y="Percentage")
print(g)
# plotting
g1 + g2 + g3
# plotting
g1 + g2 + g3 + plot_layout(ncol = 3, axes = "collect")
# plotting
g1 + g2 + g3 + plot_layout(ncol = 3) + plot_layout(axes = "collect")
# plotting
g1 + g2 + g3 + plot_layout(ncol = 3) + plot_layout(axis_titles = "collect")
# plotting
g1 + g2 + g3  + plot_layout(axis_titles = "collect")
# plotting
g1 + g2 + g3  + plot_layout(axis_titles = "collect")
# plotting
g1 + g2 + g3  + plot_layout(widths = c(1, 1,1), axis_titles = "collect")
g3 <- modules_per_grid %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.8) +
geom_jitter(color="black", size=1) +
theme_classic() +
scale_y_continuous(limits = c(0, 60)) +
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(45,55,50), tip_length = 0) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Modules per Land Use")
# plotting
g1 + g2 + g3  + plot_layout(widths = c(1, 1,1), heights = c(1, 1,1), axis_titles = "collect")
# plotting
g1 + g2 + g3  + plot_layout(widths = c(1, 1,1), heights = c(1, 1,1), axis_titles = "collect") + plot_annotation(tag_levels = 'A')
# plotting
g1 + g2 + g3  + plot_layout(widths = c(1, 1,1), heights = c(1, 1,1), axis_titles = "collect") + plot_annotation(tag_levels = '(A)')
# plotting
aligned_plots <- align_patches(g1, g2, g3)
aligned_plots  + plot_layout( axis_titles = "collect")
# plotting
aligned_plots <- align_patches(g1, g2, g3)
aligned_plots[[1]]+ aligned_plots[[2]] + plot_layout(axis_titles = "collect")
# plotting
g1+g2+g3 + plot_layout(axis_titles = "collect")
# plotting
g1|g2|g3 + plot_layout(axis_titles = "collect")
# plotting
patch <- g1|g2|g3
patch+ plot_layout(axis_titles = "collect")
# plotting
g1+g2+g3 + plot_layout(ncol=3,axis_titles = "collect")
# plotting
g1+g2+g3 + plot_layout(axis_titles = "collect_x")
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(n_p*100,1),"%")),
position = position_stack(vjust = 0.5), size = 3)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14),
panel.grid.major = element_blank()) +
scale_fill_manual(values=c("#adc178","#d6ccc2","#f07167","#83c5be")) +
labs(x="", y="Percentage")
print(g)
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(n_p*100,1),"%")),
position = position_stack(vjust = 0.5), size = 3)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14),
panel.grid.major = element_blank(), panel.border = element_rect(colour = "black", fill=NA, size=1)) +
scale_fill_manual(values=c("#adc178","#d6ccc2","#f07167","#83c5be")) +
labs(x="", y="Percentage")
print(g)
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(n_p*100,1),"%")),
position = position_stack(vjust = 0.5), size = 3)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14),
panel.grid.major = element_blank(), panel.border = element_rect(colour = "black", size=1)) +
scale_fill_manual(values=c("#adc178","#d6ccc2","#f07167","#83c5be")) +
labs(x="", y="Percentage")
print(g)
detach("package:patchwork", unload = TRUE)
library(patchwork)
# plotting
g1+g2+g3 + plot_layout(axis_titles = "collect_x")
library(ggsignif)
library(ggbreak)
modules_sizes <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID))
# summary
cat('Summary','\n')
modules_size_summary <- modules_sizes %>%
group_by(asv_core) %>%
summarise(mean = mean(n), sd = sd(n))
print(knitr::kable(modules_size_summary))
cat('\n')
# ANOVA between groups
cat('ANOVA','\n')
anova_result <- aov(n ~ asv_core, data = modules_sizes)
print(paste("F =", summary(anova_result)[[1]][["F value"]][1]))
cat('\n')
print(paste("p-value =", summary(anova_result)[[1]][["Pr(>F)"]][1]))
cat('\n')
# Perform Tukey's HSD post hoc test
cat('Tukey post-hoc','\n')
tukey_result <- TukeyHSD(anova_result)
# Extract the test statistics (q values) from the Tukey HSD results
tukey_q <- tukey_result$asv_core[, "diff"] / tukey_result$asv_core[, "lwr"]
tukey_result <- cbind(tukey_result$asv_core, q_value = tukey_q) %>%
as.data.frame() %>%
rownames_to_column("comp")
print(knitr::kable(tukey_result))
cat('\n')
g1 <- modules_sizes %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.8) +
geom_jitter(color="black", size=1) +
theme_classic() +
#scale_y_continuous(limits = c(0, 145)) +
scale_y_break(c(50,130), space=0.4, ticklabels = c(130,140))+
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(125,130,30), tip_length = 0) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="Module Size")
modules_grids <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(grid))
# summary
cat('Summary','\n')
modules_grids_summary <- modules_grids %>%
group_by(asv_core) %>%
summarise(mean = mean(n), sd = sd(n))
print(knitr::kable(modules_grids_summary))
cat('\n')
# ANOVA between groups
cat('ANOVA','\n')
anova_result <- aov(n ~ asv_core, data = modules_grids)
print(paste("F =", summary(anova_result)[[1]][["F value"]][1]))
cat('\n')
print(paste("p-value =", summary(anova_result)[[1]][["Pr(>F)"]][1]))
cat('\n')
# Perform Tukey's HSD post hoc test
cat('Tukey post-hoc','\n')
tukey_result <- TukeyHSD(anova_result)
# Extract the test statistics (q values) from the Tukey HSD results
tukey_q <- tukey_result$asv_core[, "diff"] / tukey_result$asv_core[, "lwr"]
tukey_result <- cbind(tukey_result$asv_core, q_value = tukey_q) %>%
as.data.frame() %>%
rownames_to_column("comp")
print(knitr::kable(tukey_result))
cat('\n')
g2 <- modules_grids %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.8) +
geom_jitter(color="black", size=1) +
theme_classic() +
scale_y_continuous(limits = c(0, 9), breaks = seq(0,8,by=2)) +
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(7.7,8.5,7), tip_length = 0) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Land Uses")
modules_per_grid <- modules_table_three_groups %>%
group_by(asv_core, grid) %>%
summarise(n = n_distinct(host_group))
# summary
cat('Summary','\n')
modules_per_grid_summary <- modules_per_grid %>%
group_by(asv_core) %>%
summarise(mean = mean(n), sd = sd(n))
print(knitr::kable(modules_per_grid_summary))
cat('\n')
# ANOVA between groups
cat('ANOVA','\n')
anova_result <- aov(n ~ asv_core, data = modules_per_grid)
print(paste("F =", summary(anova_result)[[1]][["F value"]][1]))
cat('\n')
print(paste("p-value =", summary(anova_result)[[1]][["Pr(>F)"]][1]))
cat('\n')
# Perform Tukey's HSD post hoc test
cat('Tukey post-hoc','\n')
tukey_result <- TukeyHSD(anova_result)
# Extract the test statistics (q values) from the Tukey HSD results
tukey_q <- tukey_result$asv_core[, "diff"] / tukey_result$asv_core[, "lwr"]
tukey_result <- cbind(tukey_result$asv_core, q_value = tukey_q) %>%
as.data.frame() %>%
rownames_to_column("comp")
print(knitr::kable(tukey_result))
cat('\n')
g3 <- modules_per_grid %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.8) +
geom_jitter(color="black", size=1) +
theme_classic() +
scale_y_continuous(limits = c(0, 60)) +
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(45,55,50), tip_length = 0) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Modules per Land Use")
# plotting
g1+g2+g3 + plot_layout(axis_titles = "collect_x")
# plotting
g1+g2+g3 + plot_layout(byrow = FALSE, axis_titles = "collect_x")
# plotting
design <- "111"
g1+g2+g3 + plot_layout(design = design, axis_titles = "collect_x")
# plotting
design <- "123"
g1+g2+g3 + plot_layout(design = design, axis_titles = "collect_x")
# plotting
design <- "123
123"
g1+g2+g3 + plot_layout(design = design, axis_titles = "collect_x")
# plotting
plot_grid(g1, g2, g3, align = "h")
# plotting
plot_grid(g1, g2, g3, nrow = 1, align = "h")
?panel.grid
g2+g3 + plot_layout(axis_titles = "collect_x")
?scale_y_break
# plotting
g1+g2+g3 + plot_layout(axis_titles = "collect_x")
library(ggsignif)
library(ggbreak)
modules_sizes <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID))
# summary
cat('Summary','\n')
modules_size_summary <- modules_sizes %>%
group_by(asv_core) %>%
summarise(mean = mean(n), sd = sd(n))
print(knitr::kable(modules_size_summary))
cat('\n')
# ANOVA between groups
cat('ANOVA','\n')
anova_result <- aov(n ~ asv_core, data = modules_sizes)
print(paste("F =", summary(anova_result)[[1]][["F value"]][1]))
cat('\n')
print(paste("p-value =", summary(anova_result)[[1]][["Pr(>F)"]][1]))
cat('\n')
# Perform Tukey's HSD post hoc test
cat('Tukey post-hoc','\n')
tukey_result <- TukeyHSD(anova_result)
# Extract the test statistics (q values) from the Tukey HSD results
tukey_q <- tukey_result$asv_core[, "diff"] / tukey_result$asv_core[, "lwr"]
tukey_result <- cbind(tukey_result$asv_core, q_value = tukey_q) %>%
as.data.frame() %>%
rownames_to_column("comp")
print(knitr::kable(tukey_result))
cat('\n')
g1 <- modules_sizes %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.8) +
geom_jitter(color="black", size=1) +
theme_classic() +
#scale_y_continuous(limits = c(0, 145)) +
#scale_y_break(c(50,130), space=0.4, ticklabels = c(130,140))+
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(125,130,30), tip_length = 0) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="Module Size")
# plotting
g1+g2+g3 + plot_layout(axis_titles = "collect_x")
g1 <- modules_sizes %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.8) +
geom_jitter(color="black", size=1) +
theme_classic() +
#scale_y_continuous(limits = c(0, 145)) +
#scale_y_break(c(50,130), space=0.4, ticklabels = c(130,140))+
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(50,60,40), tip_length = 0) +
theme(axis.text = element_text(size = 11, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="Module Size", title = "(A)")
g2 <- modules_grids %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.8) +
geom_jitter(color="black", size=1) +
theme_classic() +
scale_y_continuous(limits = c(0, 9), breaks = seq(0,8,by=2)) +
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(7.7,8.5,7), tip_length = 0) +
theme(axis.text = element_text(size = 11, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Land Uses", title = "(B)")
g3 <- modules_per_grid %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.8) +
geom_jitter(color="black", size=1) +
theme_classic() +
scale_y_continuous(limits = c(0, 60)) +
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(45,55,50), tip_length = 0) +
theme(axis.text = element_text(size = 11, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Modules per Land Use", title = "(A)")
g3 <- modules_per_grid %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_boxplot(outliers = FALSE, alpha = 0.8) +
geom_jitter(color="black", size=1) +
theme_classic() +
scale_y_continuous(limits = c(0, 60)) +
geom_signif(comparisons = list(c("Core", "Non_core"),c("Core", "Rare"),c("Non_core", "Rare")),
annotations = c("***","***","ns"),  y_position = c(45,55,50), tip_length = 0) +
theme(axis.text = element_text(size = 11, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="No. of Modules per Land Use", title = "(C)")
# plotting
g1+g2+g3 + plot_layout(axis_titles = "collect_x")
source("modularity_analysis_functions.R", local = knitr::knit_global())
# reading the microbiome data
# working only with Rattus from the three villages
# villages: Andatsakala, Mandena, Sarahandrano
vil <- "Mandena"
data_asv <- read_csv("../data/data_processed/microbiome/data_asv_rra0.001_p0.01_th5000.csv") %>% filter(village == vil)
# first of all, run this chunk of code.
# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_th <- c(0.02, 0.2)
data_asv %<>% mutate(asv_core = case_when(host_p<core_th[1] ~ "Rare",
host_p>core_th[2] ~ "Core",
.default = "Non-core"))
# # updating reads per core group
# reads_new <- data_asv %>%
#   group_by(host_ID, asv_core) %>%
#   summarise(total_reads = sum(reads*total_reads))
#
# data_asv2 = data_asv %>%  mutate(reads = reads*total_reads) %>%
#   select(-total_reads) %>%
#   left_join(reads_new, by=c("host_ID","asv_core")) %>%
#   mutate(reads = reads/total_reads)
group.colors <- c(Core = "#f4a261", Non-core = "#2b9348", Rare = "#0077b6")
group.colors <- c(Core = "#f4a261", 'Non-core' = "#2b9348", Rare = "#0077b6")
# reading the microbiome data
# working only with Rattus from the three villages
# villages: Andatsakala, Mandena, Sarahandrano
vil <- "Mandena"
data_asv <- read_csv("../data/data_processed/microbiome/data_asv_rra0.001_p0.01_th5000.csv") %>% filter(village == vil)
# first of all, run this chunk of code.
# this code does all the modularity analysis using the functions in "modularity_analysis_functions".
# There is a loop runs for the three villages, and all the analysis is done separately for each village.
# the output of the code is variables holding the final results tables and figures (the output of the functions used)
# setting thresholds for core
core_th <- c(0.02, 0.2)
data_asv %<>% mutate(asv_core = case_when(host_p<core_th[1] ~ "Rare",
host_p>core_th[2] ~ "Core",
.default = "Non-core"))
# # updating reads per core group
# reads_new <- data_asv %>%
#   group_by(host_ID, asv_core) %>%
#   summarise(total_reads = sum(reads*total_reads))
#
# data_asv2 = data_asv %>%  mutate(reads = reads*total_reads) %>%
#   select(-total_reads) %>%
#   left_join(reads_new, by=c("host_ID","asv_core")) %>%
#   mutate(reads = reads/total_reads)
group.colors <- c(Core = "#f4a261", 'Non-core' = "#2b9348", Rare = "#0077b6")
#group.colors <- c(Core = "#e76f51", Non_core = "#2b9348", Rare = "#0077b6")
core_names <- unique(data_asv$asv_core)
nmi_observed_three_groups <- NULL
modules_similarity_three_groups <- NULL
asv_degree_distribution_three_groups <- NULL
modules_three_groups <- NULL
modules_size_three_groups <- NULL
modules_grid_three_groups <- NULL
modules_table_three_groups <- NULL
betaNTI_three_groups <- NULL
raupc_three_groups <- NULL
# reading the phylogenetic tree
best_tree <- readRDS(file = "../results/phylo_tree_rra0.001_p0.01.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
# loop for three groups
for (v in core_names) {
data_asv_group <- data_asv %>%
filter(asv_core == v)
# calculating ASVs degree
asv_degree <- data_asv_group %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
dplyr::rename(asv_degree = n)
data_asv_group %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_group)
modules_table_three_groups <- rbind(modules_table_three_groups, modules_observed)
#write_csv(modules_table_three_groups, "../results/modules_table_sarahandrano.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_groups <- append(modules_similarity_three_groups, modules_similarity)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_group)
asv_degree_distribution_three_groups <- append(asv_degree_distribution_three_groups, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed)
modules_three_groups <- append(modules_three_groups, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_groups <- append(modules_size_three_groups, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_groups <- append(modules_grid_three_groups, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_groups <- append(nmi_observed_three_groups, nmi_observed)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_group %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_group$asv_ID)))
# calculating betaNTI
data_betaNTI <- data_asv_group %>%
distinct(host_ID, asv_ID) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(asv_core = v)
betaNTI_three_groups <- rbind(betaNTI_three_groups, betaNTI)
# raup-crick
raupc <- raupcrick(data_betaNTI)
raupc2 <- as.matrix(raupc)
raupc2[upper.tri(raupc2)] <- NA
diag(raupc2) <- NA
raupc2_m <- melt(raupc2) %>%
filter(!(is.na(value)))%>%
dplyr::rename(host1 = Var1, host2 = Var2, raupc = value) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(asv_core = v)
raupc_three_groups <- rbind(raupc_three_groups, raupc2_m)
}
View(data_asv)
