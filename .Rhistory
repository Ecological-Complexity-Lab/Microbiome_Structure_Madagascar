ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
# Fitting distribution to diversity data
asv_div <- asv_diversity %>% filter(host_species == common_sp[3]) %>% dplyr::select(richness)
fit_norm <- fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "nbinom")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Neg Binomial","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
# Fitting distribution to diversity data
asv_div <- asv_diversity %>% filter(host_species == common_sp[1]) %>% dplyr::select(richness)
fit_norm <- fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "nbinom")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Neg Binomial","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
# Fitting distribution to diversity data
asv_div <- asv_diversity %>% filter(host_species == common_sp[1]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "nbinom")
# Fitting distribution to diversity data
asv_div <- asv_diversity %>% filter(host_species == common_sp[2]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "nbinom")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "binom")
fit_nbinom <- fitdist(asv_div[[1]], distr = "logis")
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[2]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "logis")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Neg Binomial","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[2]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "weibull")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Neg Binomial","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[2]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "gamma")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Neg Binomial","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[2]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "beta")
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[1]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_weibull <- fitdist(asv_div[[1]], distr = "weibull")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Neg Binomial","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[1]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "weibull")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Weibull","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[2]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "weibull")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Weibull","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[3]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "weibull")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Weibull","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Weibull","LogNormal"))
shannon_grid <- glmer(paste("shannon ~", glm_formula), data = asv_diversity_host, family = weibull)
summary(fit_norm)
asv_diversity$grid_id = ifelse(asv_diversity$grid=="semi-intact_forest",
1,
ifelse(asv_diversity$grid=="secondary_forest",
2,
ifelse(asv_diversity$grid=="brushy_regrowth",3,
ifelse(asv_diversity$grid=="agriculture",4,
ifelse(asv_diversity$grid=="agroforest", 5,
ifelse(asv_diversity$grid=="flooded_rice",6,
7))))))
for(s in common_sp) {
cat('###',s,'\n','\n')
asv_diversity_host <- asv_diversity %>% filter(host_species == s) %>% mutate(grid_id = as.factor(grid_id))
# model formula
if(length(unique(asv_diversity_host$village)) > 1) {
glm_formula <- "grid_id + (1|village) + (1|season)"
} else {
glm_formula <- "grid_id + (1|season)"
}
richness_grid <- glmer(paste("richness ~", glm_formula), data = asv_diversity_host, family = poisson)
tuk_richness <- multcomp::glht(richness_grid, linfct=mcp(grid_id="Tukey"))
c <- multcomp::cld(tuk_richness)
# plotting
par(mai=c(1,1,1.5,1), no.readonly=TRUE)
plot(c)
cat('\n','\n')
shannon_grid <- glmer(paste("shannon ~", glm_formula), data = asv_diversity_host, family = gaussian)
tuk_shannon <- multcomp::glht(shannon_grid, linfct=mcp(grid_id="Tukey"))
c <- multcomp::cld(tuk_shannon)
# plotting
par(mai=c(1,1,1.5,1), no.readonly=TRUE)
plot(c)
print(summary(tuk_shannon))
cat('\n','\n')
}
asv_diversity$grid_id = ifelse(asv_diversity$grid=="semi-intact_forest",
1,
ifelse(asv_diversity$grid=="secondary_forest",
2,
ifelse(asv_diversity$grid=="brushy_regrowth",3,
ifelse(asv_diversity$grid=="agriculture",4,
ifelse(asv_diversity$grid=="agroforest", 5,
ifelse(asv_diversity$grid=="flooded_rice",6,
7))))))
for(s in common_sp) {
cat('###',s,'\n','\n')
asv_diversity_host <- asv_diversity %>% filter(host_species == s) %>% mutate(grid_id = as.factor(grid_id))
# model formula
if(length(unique(asv_diversity_host$village)) > 1) {
glm_formula <- "grid_id + (1|village) + (1|season)"
} else {
glm_formula <- "grid_id + (1|season)"
}
richness_grid <- glmer(paste("richness ~", glm_formula), data = asv_diversity_host, family = gaussian)
tuk_richness <- multcomp::glht(richness_grid, linfct=mcp(grid_id="Tukey"))
c <- multcomp::cld(tuk_richness)
# plotting
par(mai=c(1,1,1.5,1), no.readonly=TRUE)
plot(c)
cat('\n','\n')
shannon_grid <- glmer(paste("shannon ~", glm_formula), data = asv_diversity_host, family = gaussian)
tuk_shannon <- multcomp::glht(shannon_grid, linfct=mcp(grid_id="Tukey"))
c <- multcomp::cld(tuk_shannon)
# plotting
par(mai=c(1,1,1.5,1), no.readonly=TRUE)
plot(c)
print(summary(tuk_shannon))
cat('\n','\n')
}
# Fitting distribution to richness data
asv_div <- asv_diversity %>% filter(host_species == common_sp[2]) %>% dplyr::select(richness)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "pois")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Neg Binomial","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
# Fitting distribution to richness data
asv_div <- asv_diversity %>% filter(host_species == common_sp[3]) %>% dplyr::select(richness)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "pois")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Neg Binomial","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Neg Binomial","LogNormal"))
View(asv_div)
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[3]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "pois")
# Fitting distribution to shannon data
asv_div <- asv_diversity %>% filter(host_species == common_sp[3]) %>% dplyr::select(shannon)
fit_norm <- fitdistrplus::fitdist(asv_div[[1]], distr = "norm")
fit_nbinom <- fitdist(asv_div[[1]], distr = "gamma")
fit_lnorm <- fitdist(asv_div[[1]], distr = "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Poisson","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Poisson","LogNormal"))
c$signif
c$mcletters
tuk_shannon$vcov
tuk_shannon$linfct
shannon_grid
summary(shannon_grid)
unlink("GitHub/Small_Mammals_Microbiome/grid_modularity_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png'), out.width = '100%', out.height='40%')
library(tidyverse)
library(magrittr)
library(ggplot2)
library(vegan)
library(igraph)
library(blockmodels)
library(ape)
library(phangorn)
library(reshape2)
library(infomapecology)
library(aricode)
rm(list=ls())
# reading ASV data
data_asv <- read_csv("data_processed/three_villages/data_asv_0.01.csv")
data_asv %<>% filter(host_species == "Rattus rattus" & village == "Mandena")
# changing to 7 grids
full_grids <- read_csv("data_processed/three_villages/data_SM.csv") %>% dplyr::select(host_ID, grid)
data_asv %<>% dplyr::select(-grid) %>% left_join(full_grids, by="host_ID")
n_asv <- data_asv %>%
count(asv_ID) %>%
filter(n<10)
# #
#data_asv %<>% filter(asv_ID %in% n_asv$asv_ID)
data_asv_mat <- data_asv %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
# Latent Block Model
model <- blockmodels::BM_bernoulli(data_asv_mat, membership_type = "LBM", verbosity=0, plotting="")
#model <- blockmodels::BM_bernoulli(data_asv_mat, membership_type = "LBM", exploration_direction = c(10,10), exploration_factor = 10, explore_min = 1, explore_max = 100)
model$estimate()
# the best model
b <- which.max(model$ICL)
memb_host <- as.data.frame(model$memberships[[b]]$Z1)
memb_asv <- as.data.frame(model$memberships[[b]]$Z2)
# attaching hosts and ASVs IDs
host_names <- rownames(data_asv_mat)
asv_names <- colnames(data_asv_mat)
memb_host %<>% mutate(host_group = max.col(.,'first')) %>% mutate(host_ID = as.numeric(host_names))
memb_asv %<>% mutate(asv_group = max.col(.,'first')) %>% mutate(asv_ID = asv_names)
# matching host group to ASV group
data_asv %<>% left_join(memb_host %>% dplyr::select(host_ID,host_group), by = "host_ID") %>%
left_join(memb_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID")
#write_csv(data_asv, "data_processed/three_villages/data_asv_0.01_rattus_mandena_groups.csv")
cat("## Hosts", '\n')
print(knitr::kable(head(memb_host)))
cat('\n','\n')
cat("## ASVs", '\n')
print(knitr::kable(head(memb_asv)))
cat('\n','\n')
cat("## Plot", '\n')
print(model$memberships[[b]]$plot())
cat('\n','\n')
hosts <- data_asv %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::NMI(hosts$grid, hosts$host_group)
nmi_shuff <- vector(length = 1000)
for(i in 1:1000) {
# shuffling the grid attribute
hosts_shuff <- hosts %>%
mutate(grid = sample(grid,nrow(hosts)))
# calculating nmi
nmi_shuff[i] <- aricode::NMI(hosts_shuff$grid, hosts_shuff$host_group)
}
# plotting
p <- length(nmi_shuff[nmi_shuff>nmi_obs]) / length(nmi_shuff)
g <- as.data.frame(nmi_shuff) %>%
ggplot(aes(nmi_shuff)) +
geom_histogram() +
theme_bw() +
geom_vline(xintercept = nmi_obs, linetype='dashed', color="red") +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20)) +
labs(x="NMI", y="No. of Shuffled Networks")+
annotate("text", x=max(nmi_shuff), y=100, label=paste('p-value =',p))
ggsave("nmi_host_grid.pdf", path = "LBM_analysis_new_files", device = "pdf")
print(g)
cat('\n','\n')
ggsave("nmi_host_grid.pdf", path = "LBM_analysis_new_files", device = "pdf")
print(g)
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png'), out.width = '100%', out.height='40%')
library(tidyverse)
library(magrittr)
library(ggplot2)
library(vegan)
library(igraph)
library(reshape2)
library(infomapecology)
library(aricode)
rm(list=ls())
# reading ASV data
data_asv <- read_csv("data_processed/three_villages/data_asv_0.01_grids2.csv")
data_asv %<>% filter((host_species == "Rattus rattus" | host_species == "Microgale brevicaudata") & village == "Mandena") %>%
mutate(grid = factor(grid, levels = c("semi-intact_forest","secondary_forest","brushy_regrowth","agriculture","flooded_rice","agroforest","village")))
n_asv <- data_asv %>%
count(asv_ID) %>%
filter(n<3)
#
#data_asv %<>% filter(asv_ID %in% n_asv$asv_ID)
#data_asv_mat <- data_asv %>%
#  spread(asv_ID, reads, fill = 0) %>%
#  mutate(across(starts_with("ASV"), ~.*unfiltered_reads)) %>%
#  mutate(total_reads = select(.,starts_with("ASV")) %>% rowSums(na.rm = TRUE)) %>%
#  mutate(across(starts_with("ASV"), ~./total_reads)) %>%
#  gather("asv_ID", "reads", starts_with("ASV")) %>%
#  filter(reads>0)
#data_mammals <- read_csv("data_raw/Terrestrial_Mammals.csv")
#data_mammals %<>% mutate(host_ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", animal_id))) %>%
#  mutate(dist_village = as.numeric(gsub(".*?([0-9,.]+).*", "\\1", dist_village_center))) %>%
#  select(host_ID, dist_village)
#full_grids <- read_csv("data_processed/three_villages/data_SM.csv") %>% dplyr::select(host_ID, grid) %>%
#  left_join(data_mammals, by="host_ID")
#data_asv %<>% dplyr::select(-grid) %>%left_join(full_grids, by="host_ID") %>%
#  mutate(dist_village = ifelse(grid=="village",0,dist_village))
#write_csv(data_asv_mat, "data_processed/three_villages/data_asv_0.01_grids2.csv")
# distance between grids
grid_dist_avg <- data_asv %>%
distinct(host_ID, grid, dist_village) %>%
group_by(grid) %>%
summarise(distance = mean(dist_village))
data_asv_mat <- data_asv %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
s="Rattus rattus"
data_asv_s <- data_asv %>% filter(host_species==s)
data_asv_mat <- data_asv_s %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
# building the network
network_object <- infomapecology::create_monolayer_object(data_asv_mat, directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_asv <- infomap_object$modules %>% filter(node_group == "ASV")%>% dplyr::rename(asv_group = module_level1, asv_ID = node_name)
modules_host <- infomap_object$modules %>% filter(node_group == "Host")%>% dplyr::rename(host_group = module_level1, host_ID = node_name) %>% mutate(host_ID = as.numeric(host_ID))
data_asv_s %<>% left_join(modules_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID") %>%
left_join(modules_host %>% dplyr::select(host_ID,host_group), by = "host_ID")
View(data_asv_s)
View(modules_asv)
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n= n_distinct(grid))
View(n_module_grid)
n_asv <- data_asv_s %>%
count(asv_ID)
View(n_asv)
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n_grid = n_distinct(grid))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,.))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,n))
n_asv %>%
ggplot(aes(x=as.factor(n), y=n_grid, fill=as.factor(n))) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="Host Species", y="Microbiome Similarity [Jaccard]")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = as.factor(n, levels = c("1-4","5-9","10+")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = factor(n, levels = c("1-4","5-9","10+")))
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Degree", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png','pdf'), out.width = '100%', out.height='40%')
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
library(tidyverse)
library(magrittr)
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
View(data_asv)
install.packages("installr")
library(installr)
updateR()
install.packages(c("ape", "aplot", "aricode", "askpass", "backports", "bayesm", "bayestestR", "BH", "BiocManager", "bipartite", "boot", "brew", "brio", "broom", "bslib", "cachem", "callr", "class", "classInt", "cli", "clue", "cluster", "clusterGeneration", "coda", "codetools", "commonmark", "compositions", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "DEoptimR", "desc", "digest", "dotCall64", "downlit", "dplyr", "DT", "e1071", "ecodist", "effectsize", "ellipse", "emmeans", "estimability", "evaluate", "expm", "FactoMineR", "fansi", "farver", "fastmap", "fastmatch", "fBasics", "fields", "fitdistrplus", "fontawesome", "foreign", "fs", "future", "future.apply", "gargle", "gert", "ggeffects", "ggfun", "ggnewscale", "ggplot2", "ggplotify", "ggrepel", "ggridges", "ggsci", "gh", "glmmTMB", "globals", "glue", "googledrive", "googlesheets4", "gss", "gtable", "GUniFrac", "hardhat", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "iNEXT", "insight", "interp", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "lifecycle", "listenv", "lme4", "lubridate", "maps", "markdown", "MatrixModels", "matrixStats", "mgcv", "minqa", "multcomp", "multcompView", "munsell", "mvtnorm", "network", "nnet", "openssl", "pals", "parallelly", "parameters", "patchwork", "performance", "phytools", "pixmap", "pkgbuild", "pkgdown", "pkgload", "plotrix", "pls", "plyr", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "progressr", "promises", "ps", "psych", "purrr", "quantreg", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "Rfast", "rlang", "rmarkdown", "robustbase", "roxygen2", "rpart", "rprojroot", "RSQLite", "rstudioapi", "RVAideMemoire", "rvest", "s2", "sandwich", "sass", "scales", "scatterplot3d", "segmented", "seqinr", "sf", "shape", "shiny", "sjmisc", "sjPlot", "sjstats", "sna", "sp", "spam", "spatial", "statnet.common", "stringi", "stringr", "survival", "sys", "systemfonts", "tensorA", "testthat", "textshaping", "tidyr", "tidyselect", "tidytree", "timechange", "timeDate", "timeSeries", "tinytex", "TMB", "units", "usethis", "utf8", "uuid", "vctrs", "vegan", "viridis", "viridisLite", "vroom", "waldo", "withr", "wk", "xfun", "xml2", "xopen", "yaml", "yardstick", "yulab.utils", "zCompositions", "zip"))
devtools::install_github('Ecological-Complexity-Lab/emln', force=T)
devtools::install_github('Ecological-Complexity-Lab/emln', force=T)
devtools::install_github('Ecological-Complexity-Lab/infomap_ecology_package', force=T)
setwd("~/GitHub/network_course/website_source")
?commsim
setwd("~/GitHub/Microbiome_Structure_Madagascar")
grid_attributes <- read_csv("data/data_processed/village_attributes.csv") %>%
rename(grid=grid_name) %>%
filter(village == "Mandena")
library(tidyverse)
library(magrittr)
grid_attributes <- read_csv("data/data_processed/village_attributes.csv") %>%
rename(grid=grid_name) %>%
filter(village == "Mandena")
View(grid_attributes)
grid_attributes <- read_csv("data/data_processed/village_attributes.csv") %>%
rename(grid=grid_name)
grid_attr_pca <- prcomp(grid_attributes[3:10], scale=TRUE)
grid_attr_pca$x
grid_attr_pca$sdev
grid_attr_pca$rotation
?prcomp
#####################################################
# PCA for small mammals community
data_mammals_full <- read_csv("data/data_raw/data_small_mammals/Terrestrial_Mammals.csv")
data_mammals_full_mat <- data_mammals_full %>%
filter(grepl("TMR", animal_id)) %>%
rename(host_species = field_identification, grid = habitat_type) %>%
filter(host_species != "Rattus rattus", grid != "village") %>%
select(host_species, grid) %>%
count(grid, host_species) %>%
spread(host_species, n, fill = 0)
View(data_mammals_full_mat)
