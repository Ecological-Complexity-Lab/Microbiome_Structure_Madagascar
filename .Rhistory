left_join(data_mammals, by="host_ID") %>%
left_join(host_richness, by="host_ID") %>%
mutate(season = factor(season)) %>%
mutate(age_repro = ifelse(is.na(age_repro), 1, age_repro))
grid_similarity <- read_csv("data/data_processed/village_summary.csv") %>%
filter(village == vil) %>%
select(grid1, grid2, grid_attr, sm_community) %>%
mutate(grid_attr = 1-grid_attr, sm_community = 1-sm_community) %>%
mutate(grid_attr = ifelse(is.na(grid_attr), 0, grid_attr))
grid_similarity2 <- grid_similarity %>% dplyr::rename(grid1=grid2, grid2=grid1)
grid_similarity <- rbind(grid_similarity, grid_similarity2)
data_host_dist <- data_host_filtered %>%
select(host_ID) %>%
left_join(data_mammals_full %>% select(host_ID, longitude, latitude), by="host_ID")
# calculating distance
host_dist <- geosphere::distm(data_host_dist[2:3] , fun = distHaversine)
rownames(host_dist) <- data_host_dist$host_ID
colnames(host_dist) <- data_host_dist$host_ID
# transforming to long format
host_dist2 <- host_dist
host_dist2[upper.tri(host_dist2)] <- NA
diag(host_dist2) <- NA
host_distance_m <- melt(host_dist2) %>%
dplyr::rename(host_ID.x=Var1, host_ID.y=Var2, distance=value) %>%
filter(!(is.na(distance)))
final_table <- host_distance_m %>%
left_join(data_host_filtered, by=c("host_ID.x"="host_ID")) %>%
left_join(data_host_filtered, by=c("host_ID.y"="host_ID")) %>%
left_join(grid_similarity %>% select(grid1,grid2,grid_attr,sm_community), by=c("grid.x"="grid1", "grid.y"="grid2")) %>%
mutate(grid_attr = ifelse(grid.x==grid.y, 1, grid_attr), sm_community = ifelse(grid.x==grid.y, 1, sm_community)) %>%
mutate(elevation = abs(elevation.obs.x-elevation.obs.y)) %>%
mutate(month = abs(month.x-month.y)) %>%
mutate(richness = abs(richness.x-richness.y)) %>%
mutate(mass = abs(mass.x-mass.y)) %>%
mutate(age = abs(age_repro.x-age_repro.y)) %>%
mutate(grid = ifelse(grid.x==grid.y, 1, 0)) %>%
mutate(season = ifelse(season.x==season.y, 1, 0)) %>%
mutate(sex = ifelse(sex.x==sex.y, 1, 0)) %>%
mutate(module = ifelse(host_group.x==host_group.y, 1, 0)) %>%
select(host_ID.x,host_ID.y,module,grid,grid_attr,sm_community,elevation,season,month,sex,mass,age,distance,richness)
# saving table for three villages
final_table_three_villages <- rbind(final_table_three_villages, final_table)
# saving the final table as .csv
write_csv(final_table_three_villages, "data/data_processed/ML_module/ML_rattus_three_villages_rare.csv")
?raupcrick
# reading the microbiome data
# working only with Rattus from the three villages
# villages: Andatsakala, Mandena, Sarahandrano
vil <- "Mandena"
data_asv <- read_csv("../data/data_processed/microbiome/data_asv_rra0.001_p0.01_th5000.csv") %>% filter(village == vil)
v="Core"
# setting thresholds for core
core_th <- c(0.02, 0.2)
data_asv %<>% mutate(asv_core = case_when(host_p<core_th[1] ~ "Rare",
host_p>core_th[2] ~ "Core",
.default = "Non_core"))
data_asv_group <- data_asv %>%
filter(asv_core == v)
# calculating betaNTI
data_betaNTI <- data_asv_group %>%
distinct(host_ID, asv_ID) %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
View(data_betaNTI)
data(phylocom)
a=comdistnt(phylocom$sample, cophenetic(phylocom$phylo), abundance.weighted=FALSE)
library(picante)
data(phylocom)
a=comdistnt(phylocom$sample, cophenetic(phylocom$phylo), abundance.weighted=FALSE)
data(phylocom)
a=as.matrix(comdistnt(phylocom$sample, cophenetic(phylocom$phylo), abundance.weighted=FALSE))
View(a)
View(final_table)
library(caret)
library(yardstick)
# reading the ML results files
test_set <- read_csv("module_prediction/test_set_non_core.csv")
feature_importance <- read_csv("module_prediction/feature_importance_non_core.csv")
# setting a threshold for prediction
th <- 0.5
test_set_predict <- test_set %>%
select(module, y_proba) %>%
mutate(y_proba_th = ifelse(y_proba >= th, 1, 0)) %>%
mutate(predict = ifelse(module == y_proba_th, 1, 0)) %>%
mutate(y_proba_th = factor(y_proba_th, levels = c(1,0)), module = factor(module, levels = c(1,0)))
cat('## Metrics','\n','\n')
conf_matrix <- caret::confusionMatrix(data=test_set_predict$y_proba_th, reference = test_set_predict$module, dnn = c("Prediction", "Reference"))
print(knitr::kable(conf_matrix$table))
cat('\n','\n')
accuracy <- conf_matrix$overall['Accuracy']
cat("Accuracy: ", round(accuracy, 4), '\n')
precision <- conf_matrix$byClass['Precision']
cat("Precision: ", round(precision, 4), '\n')
recall <- conf_matrix$byClass['Sensitivity']
cat("Recall: ", round(recall, 4), '\n')
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1_score: ", round(f1_score, 4), '\n','\n')
cat('## ROC curve','\n','\n')
auc_roc_score <- yardstick::roc_auc(test_set_predict, module, y_proba)
roc_obj <- yardstick::roc_curve(test_set_predict, module, y_proba) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity)) +
geom_path(color = "blue") +
geom_abline(lty = 3) +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))+
labs(title = "ROC Curve", subtitle = paste("AUC = ", round(auc_roc_score$.estimate,3)))
print(roc_obj)
cat('\n','\n')
cat('## Precision-Recall curve','\n','\n')
auc_pr_score <- yardstick::pr_auc(test_set_predict, module, y_proba)
pr_obj <- yardstick::pr_curve(test_set_predict, module, y_proba) %>%
ggplot(aes(x = recall, y = precision)) +
geom_path(color = "blue") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))+
labs(title = "Precision-Recall curve", subtitle = paste("AUC = ", round(auc_pr_score$.estimate,3)))
print(pr_obj)
cat('\n','\n')
cat('## Features importance','\n','\n')
feature_imp_g <- feature_importance %>%
arrange(value) %>%
mutate(feature = factor(feature, levels = feature)) %>%
ggplot(aes(x=feature, y=value)) +
geom_bar(stat = "identity") +
coord_flip()+
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x="", y="Importance")
print(feature_imp_g)
cat('\n','\n')
library(caret)
library(yardstick)
# reading the ML results files
test_set <- read_csv("module_prediction/test_set_rare.csv")
feature_importance <- read_csv("module_prediction/feature_importance_rare.csv")
# setting a threshold for prediction
th <- 0.5
test_set_predict <- test_set %>%
select(module, y_proba) %>%
mutate(y_proba_th = ifelse(y_proba >= th, 1, 0)) %>%
mutate(predict = ifelse(module == y_proba_th, 1, 0)) %>%
mutate(y_proba_th = factor(y_proba_th, levels = c(1,0)), module = factor(module, levels = c(1,0)))
cat('## Metrics','\n','\n')
conf_matrix <- caret::confusionMatrix(data=test_set_predict$y_proba_th, reference = test_set_predict$module, dnn = c("Prediction", "Reference"))
print(knitr::kable(conf_matrix$table))
cat('\n','\n')
accuracy <- conf_matrix$overall['Accuracy']
cat("Accuracy: ", round(accuracy, 4), '\n')
precision <- conf_matrix$byClass['Precision']
cat("Precision: ", round(precision, 4), '\n')
recall <- conf_matrix$byClass['Sensitivity']
cat("Recall: ", round(recall, 4), '\n')
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1_score: ", round(f1_score, 4), '\n','\n')
cat('## ROC curve','\n','\n')
auc_roc_score <- yardstick::roc_auc(test_set_predict, module, y_proba)
roc_obj <- yardstick::roc_curve(test_set_predict, module, y_proba) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity)) +
geom_path(color = "blue") +
geom_abline(lty = 3) +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))+
labs(title = "ROC Curve", subtitle = paste("AUC = ", round(auc_roc_score$.estimate,3)))
print(roc_obj)
cat('\n','\n')
cat('## Precision-Recall curve','\n','\n')
auc_pr_score <- yardstick::pr_auc(test_set_predict, module, y_proba)
pr_obj <- yardstick::pr_curve(test_set_predict, module, y_proba) %>%
ggplot(aes(x = recall, y = precision)) +
geom_path(color = "blue") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))+
labs(title = "Precision-Recall curve", subtitle = paste("AUC = ", round(auc_pr_score$.estimate,3)))
print(pr_obj)
cat('\n','\n')
cat('## Features importance','\n','\n')
feature_imp_g <- feature_importance %>%
arrange(value) %>%
mutate(feature = factor(feature, levels = feature)) %>%
ggplot(aes(x=feature, y=value)) +
geom_bar(stat = "identity") +
coord_flip()+
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x="", y="Importance")
print(feature_imp_g)
cat('\n','\n')
View(test_set)
View(test_set_predict)
table(final_table_three_villages$module)
library(caret)
library(yardstick)
# reading the ML results files
test_set <- read_csv("module_prediction/test_set_core.csv")
feature_importance <- read_csv("module_prediction/feature_importance_core.csv")
# setting a threshold for prediction
th <- 0.5
test_set_predict <- test_set %>%
select(module, y_proba) %>%
mutate(y_proba_th = ifelse(y_proba >= th, 1, 0)) %>%
mutate(predict = ifelse(module == y_proba_th, 1, 0)) %>%
mutate(y_proba_th = factor(y_proba_th, levels = c(1,0)), module = factor(module, levels = c(1,0)))
cat('## Metrics','\n','\n')
conf_matrix <- caret::confusionMatrix(data=test_set_predict$y_proba_th, reference = test_set_predict$module, dnn = c("Prediction", "Reference"))
print(knitr::kable(conf_matrix$table))
cat('\n','\n')
accuracy <- conf_matrix$overall['Accuracy']
cat("Accuracy: ", round(accuracy, 4), '\n')
precision <- conf_matrix$byClass['Precision']
cat("Precision: ", round(precision, 4), '\n')
recall <- conf_matrix$byClass['Sensitivity']
cat("Recall: ", round(recall, 4), '\n')
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("F1_score: ", round(f1_score, 4), '\n','\n')
cat('## ROC curve','\n','\n')
auc_roc_score <- yardstick::roc_auc(test_set_predict, module, y_proba)
roc_obj <- yardstick::roc_curve(test_set_predict, module, y_proba) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity)) +
geom_path(color = "blue") +
geom_abline(lty = 3) +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))+
labs(title = "ROC Curve", subtitle = paste("AUC = ", round(auc_roc_score$.estimate,3)))
print(roc_obj)
cat('\n','\n')
cat('## Precision-Recall curve','\n','\n')
auc_pr_score <- yardstick::pr_auc(test_set_predict, module, y_proba)
pr_obj <- yardstick::pr_curve(test_set_predict, module, y_proba) %>%
ggplot(aes(x = recall, y = precision)) +
geom_path(color = "blue") +
coord_equal() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))+
labs(title = "Precision-Recall curve", subtitle = paste("AUC = ", round(auc_pr_score$.estimate,3)))
print(pr_obj)
cat('\n','\n')
cat('## Features importance','\n','\n')
feature_imp_g <- feature_importance %>%
arrange(value) %>%
mutate(feature = factor(feature, levels = feature)) %>%
ggplot(aes(x=feature, y=value)) +
geom_bar(stat = "identity") +
coord_flip()+
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x="", y="Importance")
print(feature_imp_g)
cat('\n','\n')
# reading the microbiome data
# working only with Rattus from the three villages
# villages: Andatsakala, Mandena, Sarahandrano
vil <- "Mandena"
data_asv <- read_csv("../data/data_processed/microbiome/data_asv_rra0.001_p0.01_th5000.csv") %>% filter(village == vil)
# setting thresholds for core
core_th <- c(0.02, 0.2)
data_asv %<>% mutate(asv_core = case_when(host_p<core_th[1] ~ "Rare",
host_p>core_th[2] ~ "Core",
.default = "Non_core"))
data_asv_mat <- data_asv %>%
#filter(asv_core == "Rare") %>%
select(host_ID, asv_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
hosts <- small_mammals %>%
filter(host_ID %in% rownames(data_asv_mat)) %>%
select(host_ID,grid,season,month,mass, sex,age_repro,age_dental,elevation.obs) %>%
mutate(grid=as.factor(grid), season=as.factor(season),month=as.factor(month), sex=as.factor(sex), age_dental=as.factor(age_dental))
# small mammals data
small_mammals <- read_csv("../data/data_raw/data_small_mammals/Terrestrial_Mammals.csv") %>%
mutate(host_ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", animal_id))) %>%
mutate(age_repro = as_factor(age_repro)) %>%
dplyr::rename(grid = habitat_type) %>%
filter(host_ID %in% data_asv$host_ID)
hosts <- small_mammals %>%
filter(host_ID %in% rownames(data_asv_mat)) %>%
select(host_ID,grid,season,month,mass, sex,age_repro,age_dental,elevation.obs) %>%
mutate(grid=as.factor(grid), season=as.factor(season),month=as.factor(month), sex=as.factor(sex), age_dental=as.factor(age_dental))
distance_matrix <- vegdist(data_asv_mat, method = "bray")
# Perform PERMANOVA
permanova_result <- adonis2(distance_matrix ~ grid+season+sex+age_dental, data = hosts, permutations = 999)
View(permanova_result)
#NMDS
nmds_result <- metaMDS(distance_matrix, distance = "bray", k = 2, trace = F)
plot(nmds_result, type = "t")
# Add predictor variable centroids
ordisurf(nmds_result, predictor_data$Var1, add = TRUE)
plot(nmds_result, type = "t")
# Add predictor variable centroids
ordisurf(nmds_result, hosts$grid, add = TRUE)
plot(nmds_result, type = "t")
?metaMDS
View(nmds_result)
nmds_result$points
nmds_plot <- nmds_result$points
View(nmds_plot)
nmds_plot <- nmds_result$points %>% rownames_to_column("host_ID")
nmds_plot <- nmds_result$points %>% as.data.frame() %>%  rownames_to_column("host_ID")
nmds_plot <- nmds_result$points %>% as.data.frame() %>%  rownames_to_column("host_ID") %>% left_join(hosts, by="host_ID")
nmds_plot <- nmds_result$points %>%
as.data.frame() %>%
rownames_to_column("host_ID") %>%
mutate(host_ID = as.double(host_ID)) %>%
left_join(hosts, by="host_ID")
# plotting
g <- nmds_plot %>%
ggplot( aes(NMDS1, NMDS2, color=grid)) +
geom_point(position=position_jitter(.1)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_minimal() +
annotate("text", x=0, y=max(abs(NMDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=grid)) +
geom_point(position=position_jitter(.1)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_minimal() +
annotate("text", x=0, y=max(abs(NMDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=grid)) +
geom_point(position=position_jitter(.1)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_minimal() +
annotate("text", x=0, y=max(abs(MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=grid)) +
geom_point(position=position_jitter(.1)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_minimal() +
annotate("text", x=0, y=max(abs(nmds_lot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=grid)) +
geom_point(position=position_jitter(.1)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_minimal() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=grid)) +
geom_point(position=position_jitter(.1)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=season)) +
geom_point(position=position_jitter(.1)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=season)) +
geom_point(position=position_jitter(.01)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=grid)) +
geom_point(position=position_jitter(.01)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=grid)) +
geom_point(position=position_jitter(.01)) +
stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=sex)) +
geom_point(position=position_jitter(.01)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
summary(permanova_result)
permanova_result
library(RVAideMemoire)
# PERMANOVA post-hoc
perm_post_grid <- RVAideMemoire::pairwise.perm.manova(distance_matrix, fact = hosts$grid,
test = "bonferroni", nperm = 999, progress = FALSE)$p.value %>% as.data.frame()
print(knitr::kable(perm_post_grid))
data_asv_mat <- data_asv %>%
filter(asv_core == "Rare") %>%
select(host_ID, asv_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
hosts <- small_mammals %>%
filter(host_ID %in% rownames(data_asv_mat)) %>%
select(host_ID,grid,season,month,mass, sex,age_repro,age_dental,elevation.obs) %>%
mutate(grid=as.factor(grid), season=as.factor(season),month=as.factor(month), sex=as.factor(sex), age_dental=as.factor(age_dental))
distance_matrix <- vegdist(data_asv_mat, method = "bray")
# Perform PERMANOVA
permanova_result <- adonis2(distance_matrix ~ grid+season+sex+age_dental, data = hosts, permutations = 999)
permanova_result
# PERMANOVA post-hoc
perm_post_grid <- RVAideMemoire::pairwise.perm.manova(distance_matrix, fact = hosts$grid,
test = "bonferroni", nperm = 999, progress = FALSE)$p.value %>% as.data.frame()
print(knitr::kable(perm_post_grid))
cat('\n')
#NMDS
nmds_result <- metaMDS(distance_matrix, distance = "bray", k = 2, trace = F)
# plotting
nmds_plot <- nmds_result$points %>%
as.data.frame() %>%
rownames_to_column("host_ID") %>%
mutate(host_ID = as.double(host_ID)) %>%
left_join(hosts, by="host_ID")
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=grid)) +
geom_point(position=position_jitter(.01)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
cat('\n')
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=season)) +
geom_point(position=position_jitter(.01)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=sex)) +
geom_point(position=position_jitter(.01)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
data_asv_mat <- data_asv %>%
filter(asv_core == "Non-core") %>%
select(host_ID, asv_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
hosts <- small_mammals %>%
filter(host_ID %in% rownames(data_asv_mat)) %>%
select(host_ID,grid,season,month,mass, sex,age_repro,age_dental,elevation.obs) %>%
mutate(grid=as.factor(grid), season=as.factor(season),month=as.factor(month), sex=as.factor(sex), age_dental=as.factor(age_dental))
distance_matrix <- vegdist(data_asv_mat, method = "bray")
# Perform PERMANOVA
permanova_result <- adonis2(distance_matrix ~ grid+season+sex+age_dental, data = hosts, permutations = 999)
data_asv_mat <- data_asv %>%
filter(asv_core == "Non_core") %>%
select(host_ID, asv_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
hosts <- small_mammals %>%
filter(host_ID %in% rownames(data_asv_mat)) %>%
select(host_ID,grid,season,month,mass, sex,age_repro,age_dental,elevation.obs) %>%
mutate(grid=as.factor(grid), season=as.factor(season),month=as.factor(month), sex=as.factor(sex), age_dental=as.factor(age_dental))
distance_matrix <- vegdist(data_asv_mat, method = "bray")
# Perform PERMANOVA
permanova_result <- adonis2(distance_matrix ~ grid+season+sex+age_dental, data = hosts, permutations = 999)
permanova_result
# PERMANOVA post-hoc
perm_post_grid <- RVAideMemoire::pairwise.perm.manova(distance_matrix, fact = hosts$grid,
test = "bonferroni", nperm = 999, progress = FALSE)$p.value %>% as.data.frame()
print(knitr::kable(perm_post_grid))
cat('\n')
#NMDS
nmds_result <- metaMDS(distance_matrix, distance = "bray", k = 2, trace = F)
# plotting
nmds_plot <- nmds_result$points %>%
as.data.frame() %>%
rownames_to_column("host_ID") %>%
mutate(host_ID = as.double(host_ID)) %>%
left_join(hosts, by="host_ID")
# plotting
g <- nmds_plot %>%
ggplot( aes(MDS1, MDS2, color=grid)) +
geom_point(position=position_jitter(.01)) +
#stat_ellipse(aes(fill=grid), alpha=.1, type='norm',linetype =2, geom="polygon") + ##draws 95% confidence interval ellipses
theme_bw() +
annotate("text", x=0, y=max(abs(nmds_plot$MDS2)), label=paste('Stress =',round(nmds_result$stress,3))) # adding stress
print(g)
cat('\n')
