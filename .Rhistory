print(g)
# calculating the mean
group_similarity_mean <- group_similarity_all %>%
unite("groups", Var1:Var2) %>%
group_by(groups) %>%
summarise(mean = mean(value), sd = sd(value))
host_module_partners <- function(dat, hosts) {
group_similarity_all <- NULL
for (h in hosts) {
# the modules of the focal host
h_module <- dat %>% filter(host_ID==h) %>% select(-host_ID) %>% mutate(s=T)
# taking only the module partners of the focal host
dat_module <- dat %>%
left_join(h_module, by=c("asv_core","host_group")) %>%
filter(s) %>%
select(asv_core, host_ID) %>%
mutate(n=1, host_ID = as.character(host_ID)) %>%
spread(host_ID, n, fill=0) %>%
column_to_rownames("asv_core") %>%
as.matrix()
# removing the focal host from the table
dat_module <- dat_module[, colnames(dat_module)!=h]
# calculating similarity
group_similarity <- as.matrix(1-vegdist(dat_module, method = "jaccard"))
group_similarity[upper.tri(group_similarity)] <- NA
diag(group_similarity) <- NA
group_similarity_m <- melt(group_similarity) %>%
filter(!(is.na(value))) %>%
mutate(host_ID = h)
group_similarity_all <- rbind(group_similarity_all, group_similarity_m)
}
# calculating the mean
group_similarity_mean <- group_similarity_all %>%
unite("groups", Var1:Var2) %>%
group_by(groups) %>%
summarise(mean = mean(value), sd = sd(value))
return(group_similarity_mean)
}
groups_sim <- host_module_partners(host_modules, host_list)
host_module_partners <- function(dat, hosts) {
group_similarity_all <- NULL
for (h in hosts) {
# the modules of the focal host
h_module <- dat %>% filter(host_ID==h) %>% select(-host_ID) %>% mutate(s=T)
# taking only the module partners of the focal host
dat_module <- dat %>%
left_join(h_module, by=c("asv_core","host_group")) %>%
filter(s) %>%
select(asv_core, host_ID) %>%
mutate(n=1, host_ID = as.character(host_ID)) %>%
spread(host_ID, n, fill=0) %>%
column_to_rownames("asv_core") %>%
as.matrix()
# removing the focal host from the table
dat_module <- dat_module[, colnames(dat_module)!=h]
# calculating similarity
group_similarity <- as.matrix(1-vegdist(dat_module, method = "jaccard"))
group_similarity[upper.tri(group_similarity)] <- NA
diag(group_similarity) <- NA
group_similarity_m <- melt(group_similarity) %>%
filter(!(is.na(value))) %>%
mutate(host_ID = h)
group_similarity_all <- rbind(group_similarity_all, group_similarity_m)
}
# calculating the mean
group_similarity_mean <- group_similarity_all %>%
unite("groups", Var1:Var2) %>%
group_by(groups) %>%
summarise(mean = mean(value), median = median(value), sd = sd(value))
return(group_similarity_mean)
}
groups_sim_obs <- host_module_partners(host_modules, host_list)
?vegdist
View(groups_sim_obs)
View(host_modules)
host_modules_shuff <- host_modules %>%
group_by(groups) %>%
mutate(host_group = sample(host_group))
host_modules_shuff <- host_modules %>%
group_by(asv_core) %>%
mutate(host_group = sample(host_group))
View(host_modules_shuff)
# shuffle modules membership
groups_sim_shuff_all <- NULL
# shuffle modules membership
groups_sim_shuff_all <- NULL
for(i in 1:1000) {
host_modules_shuff <- host_modules %>%
group_by(asv_core) %>%
mutate(host_group = sample(host_group))
groups_sim_shuff <- host_module_partners(host_modules_shuff, host_list)
groups_sim_shuff_all <- rbind(groups_sim_shuff_all, groups_sim_shuff)
}
for(i in 1:10) {
host_modules_shuff <- host_modules %>%
group_by(asv_core) %>%
mutate(host_group = sample(host_group))
groups_sim_shuff <- host_module_partners(host_modules_shuff, host_list)
groups_sim_shuff_all <- rbind(groups_sim_shuff_all, groups_sim_shuff)
}
View(groups_sim_shuff_all)
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
theme_bw() +
facet_wrap(~groups) +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
axis.ticks.x=element_blank()
)
print(g)
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
theme_bw() +
facet_wrap(~groups) +
geom_hline(yintercept = groups_sim_obs$mean, linetype = "dashed") +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
print(g)
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
theme_bw() +
facet_wrap(~groups) +
geom_hline(xintercept = groups_sim_obs$mean, linetype = "dashed") +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
geom_hline(xintercept = groups_sim_obs$mean, linetype = "dashed") +
facet_wrap(~groups) +
theme_bw() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
print(g)
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
geom_hline(yintercept = groups_sim_obs$mean, linetype = "dashed") +
facet_wrap(~groups) +
theme_bw() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
print(g)
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
geom_vline(xintercept = groups_sim_obs$mean, linetype = "dashed") +
facet_wrap(~groups) +
theme_bw() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
print(g)
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
geom_vline(data=groups_sim_obs, aes(xintercept = mean), linetype='dashed', color="black") +
facet_wrap(~groups) +
theme_bw() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
print(g)
host_module_partners <- function(dat, hosts) {
group_similarity_all <- NULL
for (h in hosts) {
# the modules of the focal host
h_module <- dat %>% filter(host_ID==h) %>% select(-host_ID) %>% mutate(s=T)
# taking only the module partners of the focal host
dat_module <- dat %>%
left_join(h_module, by=c("asv_core","host_group")) %>%
filter(s) %>%
select(asv_core, host_ID) %>%
mutate(n=1, host_ID = as.character(host_ID)) %>%
spread(host_ID, n, fill=0) %>%
column_to_rownames("asv_core") %>%
as.matrix()
# removing the focal host from the table
#dat_module <- dat_module[, colnames(dat_module)!=h]
# calculating similarity
group_similarity <- as.matrix(1-vegdist(dat_module, method = "jaccard"))
group_similarity[upper.tri(group_similarity)] <- NA
diag(group_similarity) <- NA
group_similarity_m <- melt(group_similarity) %>%
filter(!(is.na(value))) %>%
mutate(host_ID = h)
group_similarity_all <- rbind(group_similarity_all, group_similarity_m)
}
# calculating the mean
group_similarity_mean <- group_similarity_all %>%
unite("groups", Var1:Var2) %>%
group_by(groups) %>%
summarise(mean = mean(value), median = median(value), sd = sd(value))
return(group_similarity_mean)
}
host_modules <- modules_table_three_groups %>%
distinct(asv_core, host_ID, host_group)
host_list <- unique(host_modules$host_ID)
# observed results
groups_sim_obs <- host_module_partners(host_modules, host_list)
# shuffle modules membership
groups_sim_shuff_all <- NULL
for(i in 1:10) {
host_modules_shuff <- host_modules %>%
group_by(asv_core) %>%
mutate(host_group = sample(host_group))
groups_sim_shuff <- host_module_partners(host_modules_shuff, host_list)
groups_sim_shuff_all <- rbind(groups_sim_shuff_all, groups_sim_shuff)
}
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
geom_vline(data=groups_sim_obs, aes(xintercept = mean), linetype='dashed', color="black") +
facet_wrap(~groups) +
theme_bw() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
print(g)
View(h_module)
a=[0,0,0
View(df)
zero_matrix <- matrix(0, nrow = 2, ncol = 5)
View(zero_matrix)
as.matrix(1-vegdist(zero_matrix, method = "jaccard"))
View(groups_sim_obs)
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=median, group=groups, fill=groups)) +
geom_histogram() +
geom_vline(data=groups_sim_obs, aes(xintercept = median), linetype='dashed', color="black") +
facet_wrap(~groups) +
theme_bw() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
print(g)
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
geom_vline(data=groups_sim_obs, aes(xintercept = mean), linetype='dashed', color="black") +
facet_wrap(~groups) +
theme_bw() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
print(g)
host_module_partners <- function(dat, hosts) {
group_similarity_all <- NULL
for (h in hosts) {
# the modules of the focal host
h_module <- dat %>% filter(host_ID==h) %>% select(-host_ID) %>% mutate(s=T)
# taking only the module partners of the focal host
dat_module <- dat %>%
left_join(h_module, by=c("asv_core","host_group")) %>%
filter(s) %>%
select(asv_core, host_ID) %>%
mutate(n=1, host_ID = as.character(host_ID)) %>%
spread(host_ID, n, fill=0) %>%
column_to_rownames("asv_core") %>%
as.matrix()
# removing the focal host from the table
dat_module <- dat_module[, colnames(dat_module)!=h]
dat_module <- dat_module[rowSums(dat_module != 0) > 0, ]
# calculating similarity
group_similarity <- as.matrix(1-vegdist(dat_module, method = "jaccard"))
group_similarity[upper.tri(group_similarity)] <- NA
diag(group_similarity) <- NA
group_similarity_m <- melt(group_similarity) %>%
filter(!(is.na(value))) %>%
mutate(host_ID = h)
group_similarity_all <- rbind(group_similarity_all, group_similarity_m)
}
# calculating the mean
group_similarity_mean <- group_similarity_all %>%
unite("groups", Var1:Var2) %>%
group_by(groups) %>%
summarise(mean = mean(value), median = median(value), sd = sd(value))
return(group_similarity_mean)
}
host_modules <- modules_table_three_groups %>%
distinct(asv_core, host_ID, host_group)
host_list <- unique(host_modules$host_ID)
# observed results
groups_sim_obs <- host_module_partners(host_modules, host_list)
# shuffle modules membership
groups_sim_shuff_all <- NULL
for(i in 1:10) {
host_modules_shuff <- host_modules %>%
group_by(asv_core) %>%
mutate(host_group = sample(host_group))
groups_sim_shuff <- host_module_partners(host_modules_shuff, host_list)
groups_sim_shuff_all <- rbind(groups_sim_shuff_all, groups_sim_shuff)
}
zero_matrix2 <- zero_matrix[rowSums(zero_matrix != 0) > 0, ]
View(zero_matrix2)
host_module_partners <- function(dat, hosts) {
group_similarity_all <- NULL
for (h in hosts) {
# the modules of the focal host
h_module <- dat %>% filter(host_ID==h) %>% select(-host_ID) %>% mutate(s=T)
# taking only the module partners of the focal host
dat_module <- dat %>%
left_join(h_module, by=c("asv_core","host_group")) %>%
filter(s) %>%
select(asv_core, host_ID) %>%
mutate(n=1, host_ID = as.character(host_ID)) %>%
spread(host_ID, n, fill=0) %>%
column_to_rownames("asv_core") %>%
as.matrix()
# removing the focal host from the table
#dat_module <- dat_module[, colnames(dat_module)!=h]
# calculating similarity
group_similarity <- as.matrix(1-vegdist(dat_module, method = "jaccard"))
group_similarity[upper.tri(group_similarity)] <- NA
diag(group_similarity) <- NA
group_similarity_m <- melt(group_similarity) %>%
filter(!(is.na(value))) %>%
mutate(host_ID = h)
group_similarity_all <- rbind(group_similarity_all, group_similarity_m)
}
# calculating the mean
group_similarity_mean <- group_similarity_all %>%
unite("groups", Var1:Var2) %>%
group_by(groups) %>%
summarise(mean = mean(value), median = median(value), sd = sd(value))
return(group_similarity_mean)
}
host_modules <- modules_table_three_groups %>%
distinct(asv_core, host_ID, host_group)
host_list <- unique(host_modules$host_ID)
# observed results
groups_sim_obs <- host_module_partners(host_modules, host_list)
# shuffle modules membership
groups_sim_shuff_all <- NULL
for(i in 1:20) {
host_modules_shuff <- host_modules %>%
group_by(asv_core) %>%
mutate(host_group = sample(host_group))
groups_sim_shuff <- host_module_partners(host_modules_shuff, host_list)
groups_sim_shuff_all <- rbind(groups_sim_shuff_all, groups_sim_shuff)
}
# plotting
g <- groups_sim_shuff_all %>%
ggplot(aes(x=mean, group=groups, fill=groups)) +
geom_histogram() +
geom_vline(data=groups_sim_obs, aes(xintercept = mean), linetype='dashed', color="black") +
facet_wrap(~groups) +
theme_bw() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines")
)
print(g)
g <- modules_table_three_groups %>%
group_by(asv_core, host_group) %>%
summarise(n = n_distinct(host_ID)) %>%
ggplot(aes(x=asv_core, y=n, fill=asv_core)) +
geom_violin() +
theme_classic() +
#scale_y_continuous(limits = c(0, 50)) +
theme(axis.text = element_text(size = 12, color = 'black'), title = element_text(size = 15), legend.position = "none") +
scale_fill_manual(values=group.colors) +
labs(x="ASV Group", y="Module Size")
print(g)
?geom_bar
# beta-NTI same module?
betaNTI_final <- betaNTI_three_groups %>%
mutate(same_module = ifelse(host_group1==host_group2, "Same","Different"))
# Raup-Crick same module?
raupc_final <- raupc_three_groups %>%
mutate(same_module = ifelse(host_group1==host_group2, "Same","Different"))
# combining final results
assembly_final <- betaNTI_final %>%
full_join(raupc_final %>% dplyr::select(host1,host2,raupc,asv_core), by=c("host1","host2","asv_core"))
a=assembly_final %>% filter(is.na(betaNTI))
# calculating the process
assembly_final %<>% mutate(process = case_when(betaNTI>2 ~ "Heterogeneous Selection",
betaNTI<(-2) ~ "Homogeneous Selection",
(betaNTI<=2 & betaNTI>=(-2) & raupc>0.95) ~ "Dispersal Limitation",
(betaNTI<=2 & betaNTI>=(-2) & raupc<(-0.95)) ~ "Homogenizing Dispersal",
.default = "Drift"))
# summary
assembly_summary <- assembly_final %>%
count(asv_core, same_module, process)
View(assembly_summary)
#plotting
g <- assembly_summary %>%
ggplot(aes(fill=process, x=same_module, y=n)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(n*100,"%")),
position = position_stack(vjust = 0.5), size = 2)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="", y="Proportion")
print(g)
#plotting
g <- assembly_summary %>%
ggplot(aes(fill=process, x=same_module, y=n)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="", y="Proportion")
print(g)
assembly_summary_total <- assembly_summary %>%
group_by(asv_core, same_module) %>%
summarise(n_total = sum(n))
View(assembly_summary_total)
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
ggplot(aes(fill=process, x=same_module, y=n)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(n/n_total*100,"%")),
position = position_stack(vjust = 0.5), size = 2)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="", y="Percentage")
print(g)
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module"))
View(g)
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total)
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(n_p*100,"%")),
position = position_stack(vjust = 0.5), size = 2)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="", y="Percentage")
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(n_p*100,"%")),
position = position_stack(vjust = 0.5), size = 2)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="", y="Percentage")
print(g)
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(n_p*100,2),"%")),
position = position_stack(vjust = 0.5), size = 2)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="", y="Percentage")
print(g)
#plotting
g <- assembly_summary %>%
left_join(assembly_summary_total, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(n_p*100,1),"%")),
position = position_stack(vjust = 0.5), size = 3)+
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14)) +
labs(x="", y="Percentage")
print(g)
