print(knitr::kable(anova_model_all))
cat('\n','\n')
print(knitr::kable(anova_rda_all))
cat('\n','\n')
rda_figs[[1]] + rda_figs[[2]] + rda_figs[[3]] + plot_layout(guides='collect') &
theme(legend.position='bottom')
cat('\n','\n')
rda_figs[[1]] + rda_figs[[2]] + rda_figs[[3]] + plot_layout(guides='collect') &
theme(legend.position='bottom')
# RDA for modules
anova_model_all <- NULL
anova_rda_all <- NULL
score_modules_top_all <- NULL
rda_figs <- list()
# loop for three asv groups
for (i in 1:3) {
modules_similarity2 <- modules_similarity2_three_groups[[i]]
grid_names <- rownames(modules_similarity2)
# filtering matrix to the existing grids
grids_similarity_attr2 <- grids_similarity_attr %>%  filter(grid_village %in% grid_names & !grepl("village", grid_village))
modules_similarity2 <- modules_similarity2[rownames(grids_similarity_attr2),]
n=data_asv %>% group_by(village,grid) %>% summarise(n=n_distinct(host_ID))
grids_similarity_attr2 %<>% left_join(n, by=c("village","grid"))
# tb-RDA
# hellinger transformation
modules_similarity2_hell <- decostand(modules_similarity2, 'hell')
rda_result <- rda(modules_similarity2_hell ~ veg_PC1+veg_PC2+dist_to_village+elevation+Condition(n), data=grids_similarity_attr2, na.action = na.omit)
# **Condition(n) - control for the number of host in each village-grid.
# variation explained
constrained_eig <- t(as.data.frame(rda_result$CCA$eig/rda_result$tot.chi*100))  # for RDAs
# unconstrained_eig <- rda_result$CA$eig/rda_result$tot.chi*100
# expl_var <- c(constrained_eig, unconstrained_eig)
# barplot (expl_var[1:20], col = c(rep ('red', length (constrained_eig)), rep ('black', length (unconstrained_eig))),
#          las = 2, ylab = '% variation')
R2.obs <- RsquareAdj (rda_result)$adj.r.squared
# significance test for the whole model
anova_model <- anova(rda_result)[1,] %>%
mutate(R2.adj = R2.obs, asv_core = core_names[i])
anova_model_all <- rbind(anova_model_all, anova_model)
# significance test for all variables
anova_rda <- anova(rda_result, by = "margin", permutations = 999) %>%
mutate(asv_core = core_names[i])
anova_rda$`Pr(>F)` <- p.adjust (anova_rda$`Pr(>F)`, method = 'holm')
anova_rda_all <- rbind(anova_rda_all, anova_rda)
# scores
score_modules <- as.data.frame(vegan::scores(rda_result)$species) %>%
mutate(RDA1_abs = abs(RDA1), RDA2_abs = abs(RDA2))
score_modules_top <- score_modules %>%
slice_max(n = 5, order_by = RDA1_abs) %>%
bind_rows(score_modules %>% slice_max(n = 5, order_by = RDA2_abs)) %>%
rownames_to_column("host_group") %>%
mutate(asv_core = core_names[i])
score_modules_top_all <- rbind(score_modules_top_all, score_modules_top)
# plotting
# samples
rda_samples <- as.data.frame(scores(rda_result)$sites) %>%
rownames_to_column("grid_village") %>%
left_join(grids_similarity_attr2[c("grid_village","village","grid")], by="grid_village")
# variables
rda_var <- as.data.frame(rda_result$CCA$biplot)
# plot
g <- rda_samples %>%
ggplot(aes(RDA1, RDA2)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "grey") +
geom_vline(xintercept = 0, linetype = "dotted", color = "grey") +
geom_point(size = 4, alpha=0.6, color=group.colors[i]) +
geom_segment(data = rda_var, inherit.aes = FALSE, aes(x = 0, y = 0, xend = (RDA1*0.85), yend = (RDA2*0.85)),
arrow = arrow(length = unit(0.15, "cm"))) +
geom_text(data = rda_var,inherit.aes = FALSE, aes(x = RDA1, y = RDA2, label=rownames(rda_var)))+
theme_bw() +
theme(panel.border = element_rect(colour = "black", size=1), panel.grid = element_blank())+
labs(x = paste("RDA1 (",round(constrained_eig[1],2),"%)", sep = ""), y = paste("RDA2 (",round(constrained_eig[2],2),"%)", sep = ""),
title = paste(core_names[i]), color = "Land Use", shape = "Village")
rda_figs <- append(rda_figs, list(g))
}
print(knitr::kable(anova_model_all))
cat('\n','\n')
print(knitr::kable(anova_rda_all))
cat('\n','\n')
rda_figs[[1]] + rda_figs[[2]] + rda_figs[[3]] + plot_layout(guides='collect') &
theme(legend.position='bottom')
cat('\n','\n')
group.colors[i]
source("../modularity_analysis_functions.R", local = knitr::knit_global())
# reading the microbiome data
# working only with Rattus from the three villages
# villages: Andatsakala, Mandena, Sarahandrano
data_asv <- read_csv("../../data/data_processed/microbiome/data_asv_rra0.001_p0.01_th5000_all.csv")
core_names <- unique(data_asv$asv_core)
nmi_observed_three_groups <- NULL
modules_similarity_three_groups <- NULL
modules_similarity2_three_groups <- NULL
asv_degree_distribution_three_groups <- NULL
modules_three_groups <- NULL
modules_size_three_groups <- NULL
modules_grid_three_groups <- NULL
modules_table_three_groups <- NULL
betaNTI_three_groups <- NULL
raupc_three_groups <- NULL
assembly_three_groups <- NULL
# reading the phylogenetic tree
best_tree <- readRDS(file = "../../results/phylo_tree_rra0.001_p0.01.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
data_asv_group <- data_asv %>%
filter(asv_core == v)
data_asv_group <- data_asv
# calculating ASVs degree
asv_degree <- data_asv_group %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
dplyr::rename(asv_degree = n)
data_asv_group %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_group)
modules_table_three_groups <- rbind(modules_table_three_groups, modules_observed)
# calculating similarity in modules between grids-seasons
modules_similarity2 <- fun_modules_similarity2(modules_observed %>% filter((host_group!=1 & asv_core!="Rare") | asv_core=="Rare"))
modules_similarity2 <- fun_modules_similarity2(modules_observed)
# saving results in one table
modules_similarity2_three_groups <- append(modules_similarity2_three_groups, modules_similarity2)
# figure of modules
modules <- fun_modules(modules_observed)
modules_three_groups <- append(modules_three_groups, modules)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_group %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_group$host_ID)))
data_assembly <- data_asv_group %>%
mutate(reads=1) %>%
distinct(host_ID, asv_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
asv_distance2 <- asv_distance[rownames(asv_distance)%in%asv_pool$asv_ID , colnames(asv_distance)%in%asv_pool$asv_ID]
raupc <- as.matrix(raupcrick(data_assembly, nsimul = 100))
assembly <- iCAMP::qpen(data_assembly, pd = asv_distance2, RC=raupc, rand=100, sig.bNTI = 2, sig.rc = 0.95, ab.weight=F, nworker = 4)
assembly_result <- assembly$result %>%
mutate(sample1 = as.double(sample1), sample2 = as.double(sample2)) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(asv_core = v)
assembly_result <- assembly$result %>%
mutate(sample1 = as.double(sample1), sample2 = as.double(sample2)) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid)
assembly_three_groups <- rbind(assembly_three_groups, assembly_result)
# loop for three groups
for (i in 1:3) {
cat('##',core_names[i],'{.tabset}','\n','\n')
cat('### ASVs degree distribution','\n')
print(asv_degree_distribution_three_groups[[i]])
cat('\n','\n')
# calculating connectance
connectance_data <- modules_table_three_groups %>%
filter(asv_core == core_names[i])
cat('No. of hosts: ', length(unique(connectance_data$host_ID)) ,'\n','\n')
cat('No. of ASVs: ', length(unique(connectance_data$asv_ID)) ,'\n','\n')
cat('Connectance: ', nrow(connectance_data) / (length(unique(connectance_data$host_ID)) * length(unique(connectance_data$asv_ID))) ,'\n','\n')
cat('### Modules','\n')
cat('The color indicates number of host individuals in the module / total number of hosts in the whole grid [%]','\n','\n')
print(modules_three_groups[[i]])
cat('\n','\n')
cat('### Modules size','\n')
print(modules_size_three_groups[[i]])
cat('\n','\n')
cat('### No. of land uses','\n')
print(modules_grid_three_groups[[i]])
cat('\n','\n')
}
print(modules_three_groups[[i]])
source("../modularity_analysis_functions.R", local = knitr::knit_global())
# reading the microbiome data
# working only with Rattus from the three villages
# villages: Andatsakala, Mandena, Sarahandrano
data_asv <- read_csv("../../data/data_processed/microbiome/data_asv_rra0.001_p0.01_th5000_all.csv")
data_asv%<>%mutate(asv_core="all")
View(data_asv)
group.colors <- c(Core = "#f4a261", 'Non-core' = "#2b9348", Rare = "#0077b6")
core_names <- unique(data_asv$asv_core)
nmi_observed_three_groups <- NULL
modules_similarity_three_groups <- NULL
modules_similarity2_three_groups <- NULL
asv_degree_distribution_three_groups <- NULL
modules_three_groups <- NULL
modules_size_three_groups <- NULL
modules_grid_three_groups <- NULL
modules_table_three_groups <- NULL
betaNTI_three_groups <- NULL
raupc_three_groups <- NULL
assembly_three_groups <- NULL
# reading the phylogenetic tree
best_tree <- readRDS(file = "../../results/phylo_tree_rra0.001_p0.01.rds")
phylo_tree <- best_tree$tree
# ASVs phylogenetic distance
asv_distance <- ape::cophenetic.phylo(phylo_tree)
# loop for three groups
for (v in core_names) {
data_asv_group <- data_asv %>%
filter(asv_core == v)
# calculating ASVs degree
asv_degree <- data_asv_group %>%
group_by(asv_ID) %>%
summarise(n = n_distinct(host_ID)) %>%
dplyr::rename(asv_degree = n)
data_asv_group %<>% left_join(asv_degree, by="asv_ID")
##### observed network
# finding modules
modules_observed <- fun_modularity_analysis(data_asv_group)
modules_table_three_groups <- rbind(modules_table_three_groups, modules_observed)
#write_csv(modules_table_three_groups, "../results/modules_table_sarahandrano.csv")
# calculating similarity in modules between grids
modules_similarity <- fun_modules_similarity(modules_observed)
# saving results in one table
modules_similarity_three_groups <- append(modules_similarity_three_groups, modules_similarity)
# calculating similarity in modules between grids-seasons
modules_similarity2 <- fun_modules_similarity2(modules_observed )
#%>% filter((host_group!=1 & asv_core!="Rare") | asv_core=="Rare")
# saving results in one table
modules_similarity2_three_groups <- append(modules_similarity2_three_groups, modules_similarity2)
# ASVs degree distribution
asv_degree_distribution <- fun_asv_degree_distribution(data_asv_group)
asv_degree_distribution_three_groups <- append(asv_degree_distribution_three_groups, asv_degree_distribution)
# figure of modules
modules <- fun_modules(modules_observed)
modules_three_groups <- append(modules_three_groups, modules)
# modules size
modules_size <- fun_module_size(modules_observed)
modules_size_three_groups <- append(modules_size_three_groups, modules_size)
# Number of land uses per module
modules_grid <- fun_module_grid(modules_observed)
modules_grid_three_groups <- append(modules_grid_three_groups, modules_grid)
# calculating NMI
nmi_observed <- fun_nmi_calc(modules_observed, TRUE)
# saving results in one list
nmi_observed_three_groups <- append(nmi_observed_three_groups, nmi_observed)
##### phylogenetic analysis
# ASVs pool
asv_pool <- data_asv_group %>%
distinct(asv_ID, asv_degree) %>%
mutate(p = asv_degree/length(unique(data_asv_group$host_ID)))
data_assembly <- data_asv_group %>%
mutate(reads=1) %>%
distinct(host_ID, asv_ID, reads) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
as.matrix()
asv_distance2 <- asv_distance[rownames(asv_distance)%in%asv_pool$asv_ID , colnames(asv_distance)%in%asv_pool$asv_ID]
raupc <- as.matrix(raupcrick(data_assembly, nsimul = 100))
assembly <- iCAMP::qpen(data_assembly, pd = asv_distance2, RC=raupc, rand=100, sig.bNTI = 2, sig.rc = 0.95, ab.weight=F, nworker = 4)
assembly_result <- assembly$result %>%
mutate(sample1 = as.double(sample1), sample2 = as.double(sample2)) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("sample2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
mutate(asv_core = v)
assembly_three_groups <- rbind(assembly_three_groups, assembly_result)
# # calculating betaNTI
# data_betaNTI <- data_asv_group %>%
#   distinct(host_ID, asv_ID) %>%
#   mutate(reads = 1) %>%
#   spread(asv_ID, reads, fill = 0) %>%
#   column_to_rownames("host_ID") %>%
#   as.matrix()
#
# betaNTI <- fun_calc_betaNTI(data_betaNTI, asv_distance, asv_pool, n_phylo_shuff) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
#   mutate(asv_core = v)
# betaNTI_three_groups <- rbind(betaNTI_three_groups, betaNTI)
#
# # raup-crick
#
# raupc <- iCAMP::RC.pc(data_raupc, taxo.metric="bray", rand=100, weighted=TRUE, dirichlet=F, nworker = 4)
#
# raupc <- raupcrick(data_betaNTI)
# raupc2 <- as.matrix(raupc)
# raupc2[upper.tri(raupc2)] <- NA
# diag(raupc2) <- NA
# raupc2_m <- melt(raupc2) %>%
#   filter(!(is.na(value)))%>%
#   dplyr::rename(host1 = Var1, host2 = Var2, raupc = value) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host1"="host_ID")) %>% dplyr::rename(host_group1=host_group, grid1=grid) %>%
#   left_join(modules_observed %>% distinct(host_ID, host_group, grid), by=c("host2"="host_ID")) %>% dplyr::rename(host_group2=host_group, grid2=grid) %>%
#   mutate(asv_core = v)
# raupc_three_groups <- rbind(raupc_three_groups, raupc2_m)
}
# loop for three groups
for (i in 1:3) {
cat('##',core_names[i],'{.tabset}','\n','\n')
cat('### ASVs degree distribution','\n')
print(asv_degree_distribution_three_groups[[i]])
cat('\n','\n')
# calculating connectance
connectance_data <- modules_table_three_groups %>%
filter(asv_core == core_names[i])
cat('No. of hosts: ', length(unique(connectance_data$host_ID)) ,'\n','\n')
cat('No. of ASVs: ', length(unique(connectance_data$asv_ID)) ,'\n','\n')
cat('Connectance: ', nrow(connectance_data) / (length(unique(connectance_data$host_ID)) * length(unique(connectance_data$asv_ID))) ,'\n','\n')
cat('### Modules','\n')
cat('The color indicates number of host individuals in the module / total number of hosts in the whole grid [%]','\n','\n')
print(modules_three_groups[[i]])
cat('\n','\n')
cat('### Modules size','\n')
print(modules_size_three_groups[[i]])
cat('\n','\n')
cat('### No. of land uses','\n')
print(modules_grid_three_groups[[i]])
cat('\n','\n')
}
# combining final results
assembly_final <- assembly_three_groups %>%
mutate(same_module = ifelse(host_group1==host_group2, "Same","Different"))
# renaming the process
assembly_final %<>% mutate(process = case_when(process=="Heterogeneous.Selection" ~ "Heterogeneous Selection",
process=="Homogeneous.Selection" ~ "Homogeneous Selection",
process=="Dispersal.Limitation" ~ "Dispersal Limitation",
process=="Homogenizing.Dispersal" ~ "Homogenizing Dispersal",
.default = "Drift"))
# summary
assembly_summary <- assembly_final %>%
count(asv_core, same_module, process)
assembly_summary_total <- assembly_summary %>%
group_by(asv_core) %>%
summarise(n_total = sum(n))
assembly_summary_total_module <- assembly_summary %>%
group_by(asv_core, same_module) %>%
summarise(n_total = sum(n))
#plotting process ratio between groups
g1 <- assembly_summary %>%
group_by(asv_core, process) %>%
summarise(n = sum(n)) %>%
left_join(assembly_summary_total, by=c("asv_core")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=asv_core, y=n_p)) +
geom_bar(position="fill", stat="identity") +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(n_p*100,1),"%")),
position = position_stack(vjust = 0.5), size = 3)+
theme_bw() +
theme(axis.text = element_text(size = 11, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14),
strip.text = element_text(size=12, color = 'black'), strip.background = element_rect(color = "grey80", size = 1),
panel.grid = element_blank(), panel.background = element_rect(colour = "black")) +
scale_fill_manual(values=c("#adc178","#d6ccc2","#f07167","#83c5be")) +
labs(x="ASVs Groups", y="Percentage")
print(g1)
#plotting process ratio between modules
g2 <- assembly_summary %>%
left_join(assembly_summary_total_module, by=c("asv_core","same_module")) %>%
mutate(n_p = n/n_total) %>%
ggplot(aes(fill=process, x=same_module, y=n_p)) +
geom_bar(position="fill", stat="identity") +
facet_wrap(~asv_core) +
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label = paste0(round(n_p*100,1),"%")),
position = position_stack(vjust = 0.5), size = 3)+
theme_bw() +
theme(axis.text = element_text(size = 11, color = 'black', angle = 90, vjust = 0.5, hjust=1), title = element_text(size = 14),
strip.text = element_text(size=12, color = 'black'), strip.background = element_rect(color = "grey80", size = 1),
panel.grid = element_blank(), panel.background = element_rect(colour = "black")) +
scale_fill_manual(values=c("#adc178","#d6ccc2","#f07167","#83c5be")) +
labs(x="", y="Percentage")
print(g2)
# reading grid similarity results
grids_similarity_attr <- read_csv("../../data/data_processed/village_summary_new.csv")
rownames(grids_similarity_attr) <- grids_similarity_attr$grid_village
# correlations between variables
print(psych::pairs.panels(grids_similarity_attr %>%  select(-grid_village,-village,-grid), ellipses = F, lm = F))
cat('\n','\n')
# RDA for modules
anova_model_all <- NULL
anova_rda_all <- NULL
score_modules_top_all <- NULL
rda_figs <- list()
# loop for three asv groups
for (i in 1:3) {
modules_similarity2 <- modules_similarity2_three_groups[[i]]
grid_names <- rownames(modules_similarity2)
# filtering matrix to the existing grids
grids_similarity_attr2 <- grids_similarity_attr %>%  filter(grid_village %in% grid_names & !grepl("village", grid_village))
modules_similarity2 <- modules_similarity2[rownames(grids_similarity_attr2),]
n=data_asv %>% group_by(village,grid) %>% summarise(n=n_distinct(host_ID))
grids_similarity_attr2 %<>% left_join(n, by=c("village","grid"))
# tb-RDA
# hellinger transformation
modules_similarity2_hell <- decostand(modules_similarity2, 'hell')
rda_result <- rda(modules_similarity2_hell ~ veg_PC1+veg_PC2+dist_to_village+elevation+Condition(n), data=grids_similarity_attr2, na.action = na.omit)
# **Condition(n) - control for the number of host in each village-grid.
# variation explained
constrained_eig <- t(as.data.frame(rda_result$CCA$eig/rda_result$tot.chi*100))  # for RDAs
# unconstrained_eig <- rda_result$CA$eig/rda_result$tot.chi*100
# expl_var <- c(constrained_eig, unconstrained_eig)
# barplot (expl_var[1:20], col = c(rep ('red', length (constrained_eig)), rep ('black', length (unconstrained_eig))),
#          las = 2, ylab = '% variation')
R2.obs <- RsquareAdj (rda_result)$adj.r.squared
# significance test for the whole model
anova_model <- anova(rda_result)[1,] %>%
mutate(R2.adj = R2.obs, asv_core = core_names[i])
anova_model_all <- rbind(anova_model_all, anova_model)
# significance test for all variables
anova_rda <- anova(rda_result, by = "margin", permutations = 999) %>%
mutate(asv_core = core_names[i])
anova_rda$`Pr(>F)` <- p.adjust (anova_rda$`Pr(>F)`, method = 'holm')
anova_rda_all <- rbind(anova_rda_all, anova_rda)
# scores
score_modules <- as.data.frame(vegan::scores(rda_result)$species) %>%
mutate(RDA1_abs = abs(RDA1), RDA2_abs = abs(RDA2))
score_modules_top <- score_modules %>%
slice_max(n = 5, order_by = RDA1_abs) %>%
bind_rows(score_modules %>% slice_max(n = 5, order_by = RDA2_abs)) %>%
rownames_to_column("host_group") %>%
mutate(asv_core = core_names[i])
score_modules_top_all <- rbind(score_modules_top_all, score_modules_top)
# plotting
# samples
rda_samples <- as.data.frame(scores(rda_result)$sites) %>%
rownames_to_column("grid_village") %>%
left_join(grids_similarity_attr2[c("grid_village","village","grid")], by="grid_village")
# variables
rda_var <- as.data.frame(rda_result$CCA$biplot)
# plot
g <- rda_samples %>%
ggplot(aes(RDA1, RDA2, color=grid, shape=village)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "grey") +
geom_vline(xintercept = 0, linetype = "dotted", color = "grey") +
geom_point(size = 4, alpha=0.6) +
geom_segment(data = rda_var, inherit.aes = FALSE, aes(x = 0, y = 0, xend = (RDA1*0.85), yend = (RDA2*0.85)),
arrow = arrow(length = unit(0.15, "cm"))) +
geom_text(data = rda_var,inherit.aes = FALSE, aes(x = RDA1, y = RDA2, label=rownames(rda_var)))+
theme_bw() +
theme(panel.border = element_rect(colour = "black", size=1), panel.grid = element_blank())+
labs(x = paste("RDA1 (",round(constrained_eig[1],2),"%)", sep = ""), y = paste("RDA2 (",round(constrained_eig[2],2),"%)", sep = ""),
title = paste(core_names[i]), color = "Land Use", shape = "Village")
rda_figs <- append(rda_figs, list(g))
}
# RDA for modules
anova_model_all <- NULL
anova_rda_all <- NULL
score_modules_top_all <- NULL
rda_figs <- list()
# loop for three asv groups
for (i in 1:1) {
modules_similarity2 <- modules_similarity2_three_groups[[i]]
grid_names <- rownames(modules_similarity2)
# filtering matrix to the existing grids
grids_similarity_attr2 <- grids_similarity_attr %>%  filter(grid_village %in% grid_names & !grepl("village", grid_village))
modules_similarity2 <- modules_similarity2[rownames(grids_similarity_attr2),]
n=data_asv %>% group_by(village,grid) %>% summarise(n=n_distinct(host_ID))
grids_similarity_attr2 %<>% left_join(n, by=c("village","grid"))
# tb-RDA
# hellinger transformation
modules_similarity2_hell <- decostand(modules_similarity2, 'hell')
rda_result <- rda(modules_similarity2_hell ~ veg_PC1+veg_PC2+dist_to_village+elevation+Condition(n), data=grids_similarity_attr2, na.action = na.omit)
# **Condition(n) - control for the number of host in each village-grid.
# variation explained
constrained_eig <- t(as.data.frame(rda_result$CCA$eig/rda_result$tot.chi*100))  # for RDAs
# unconstrained_eig <- rda_result$CA$eig/rda_result$tot.chi*100
# expl_var <- c(constrained_eig, unconstrained_eig)
# barplot (expl_var[1:20], col = c(rep ('red', length (constrained_eig)), rep ('black', length (unconstrained_eig))),
#          las = 2, ylab = '% variation')
R2.obs <- RsquareAdj (rda_result)$adj.r.squared
# significance test for the whole model
anova_model <- anova(rda_result)[1,] %>%
mutate(R2.adj = R2.obs, asv_core = core_names[i])
anova_model_all <- rbind(anova_model_all, anova_model)
# significance test for all variables
anova_rda <- anova(rda_result, by = "margin", permutations = 999) %>%
mutate(asv_core = core_names[i])
anova_rda$`Pr(>F)` <- p.adjust (anova_rda$`Pr(>F)`, method = 'holm')
anova_rda_all <- rbind(anova_rda_all, anova_rda)
# scores
score_modules <- as.data.frame(vegan::scores(rda_result)$species) %>%
mutate(RDA1_abs = abs(RDA1), RDA2_abs = abs(RDA2))
score_modules_top <- score_modules %>%
slice_max(n = 5, order_by = RDA1_abs) %>%
bind_rows(score_modules %>% slice_max(n = 5, order_by = RDA2_abs)) %>%
rownames_to_column("host_group") %>%
mutate(asv_core = core_names[i])
score_modules_top_all <- rbind(score_modules_top_all, score_modules_top)
# plotting
# samples
rda_samples <- as.data.frame(scores(rda_result)$sites) %>%
rownames_to_column("grid_village") %>%
left_join(grids_similarity_attr2[c("grid_village","village","grid")], by="grid_village")
# variables
rda_var <- as.data.frame(rda_result$CCA$biplot)
# plot
g <- rda_samples %>%
ggplot(aes(RDA1, RDA2, color=grid, shape=village)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "grey") +
geom_vline(xintercept = 0, linetype = "dotted", color = "grey") +
geom_point(size = 4, alpha=0.6) +
geom_segment(data = rda_var, inherit.aes = FALSE, aes(x = 0, y = 0, xend = (RDA1*0.85), yend = (RDA2*0.85)),
arrow = arrow(length = unit(0.15, "cm"))) +
geom_text(data = rda_var,inherit.aes = FALSE, aes(x = RDA1, y = RDA2, label=rownames(rda_var)))+
theme_bw() +
theme(panel.border = element_rect(colour = "black", size=1), panel.grid = element_blank())+
labs(x = paste("RDA1 (",round(constrained_eig[1],2),"%)", sep = ""), y = paste("RDA2 (",round(constrained_eig[2],2),"%)", sep = ""),
title = paste(core_names[i]), color = "Land Use", shape = "Village")
rda_figs <- append(rda_figs, list(g))
}
print(knitr::kable(anova_model_all))
cat('\n','\n')
print(knitr::kable(anova_rda_all))
cat('\n','\n')
rda_figs[[1]] + rda_figs[[2]] + rda_figs[[3]] + plot_layout(guides='collect') &
theme(legend.position='bottom')
rda_figs[[1]]
View(anova_rda)
View(anova_model)
