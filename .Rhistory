par(mfrow = c(2, 2))
plot.legend <- c("Normal", "Poisson","LogNormal")
denscomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
qqcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
cdfcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
ppcomp(list(fit_norm,fit_nbinom,fit_lnorm), legendtext = plot.legend)
gofstat(list(fit_norm,fit_nbinom,fit_lnorm),fitnames = c("Normal", "Poisson","LogNormal"))
c$signif
c$mcletters
tuk_shannon$vcov
tuk_shannon$linfct
shannon_grid
summary(shannon_grid)
unlink("GitHub/Small_Mammals_Microbiome/grid_modularity_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png'), out.width = '100%', out.height='40%')
library(tidyverse)
library(magrittr)
library(ggplot2)
library(vegan)
library(igraph)
library(blockmodels)
library(ape)
library(phangorn)
library(reshape2)
library(infomapecology)
library(aricode)
rm(list=ls())
# reading ASV data
data_asv <- read_csv("data_processed/three_villages/data_asv_0.01.csv")
data_asv %<>% filter(host_species == "Rattus rattus" & village == "Mandena")
# changing to 7 grids
full_grids <- read_csv("data_processed/three_villages/data_SM.csv") %>% dplyr::select(host_ID, grid)
data_asv %<>% dplyr::select(-grid) %>% left_join(full_grids, by="host_ID")
n_asv <- data_asv %>%
count(asv_ID) %>%
filter(n<10)
# #
#data_asv %<>% filter(asv_ID %in% n_asv$asv_ID)
data_asv_mat <- data_asv %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
# Latent Block Model
model <- blockmodels::BM_bernoulli(data_asv_mat, membership_type = "LBM", verbosity=0, plotting="")
#model <- blockmodels::BM_bernoulli(data_asv_mat, membership_type = "LBM", exploration_direction = c(10,10), exploration_factor = 10, explore_min = 1, explore_max = 100)
model$estimate()
# the best model
b <- which.max(model$ICL)
memb_host <- as.data.frame(model$memberships[[b]]$Z1)
memb_asv <- as.data.frame(model$memberships[[b]]$Z2)
# attaching hosts and ASVs IDs
host_names <- rownames(data_asv_mat)
asv_names <- colnames(data_asv_mat)
memb_host %<>% mutate(host_group = max.col(.,'first')) %>% mutate(host_ID = as.numeric(host_names))
memb_asv %<>% mutate(asv_group = max.col(.,'first')) %>% mutate(asv_ID = asv_names)
# matching host group to ASV group
data_asv %<>% left_join(memb_host %>% dplyr::select(host_ID,host_group), by = "host_ID") %>%
left_join(memb_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID")
#write_csv(data_asv, "data_processed/three_villages/data_asv_0.01_rattus_mandena_groups.csv")
cat("## Hosts", '\n')
print(knitr::kable(head(memb_host)))
cat('\n','\n')
cat("## ASVs", '\n')
print(knitr::kable(head(memb_asv)))
cat('\n','\n')
cat("## Plot", '\n')
print(model$memberships[[b]]$plot())
cat('\n','\n')
hosts <- data_asv %>% distinct(host_ID, grid, host_group)
nmi_obs <- aricode::NMI(hosts$grid, hosts$host_group)
nmi_shuff <- vector(length = 1000)
for(i in 1:1000) {
# shuffling the grid attribute
hosts_shuff <- hosts %>%
mutate(grid = sample(grid,nrow(hosts)))
# calculating nmi
nmi_shuff[i] <- aricode::NMI(hosts_shuff$grid, hosts_shuff$host_group)
}
# plotting
p <- length(nmi_shuff[nmi_shuff>nmi_obs]) / length(nmi_shuff)
g <- as.data.frame(nmi_shuff) %>%
ggplot(aes(nmi_shuff)) +
geom_histogram() +
theme_bw() +
geom_vline(xintercept = nmi_obs, linetype='dashed', color="red") +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20)) +
labs(x="NMI", y="No. of Shuffled Networks")+
annotate("text", x=max(nmi_shuff), y=100, label=paste('p-value =',p))
ggsave("nmi_host_grid.pdf", path = "LBM_analysis_new_files", device = "pdf")
print(g)
cat('\n','\n')
ggsave("nmi_host_grid.pdf", path = "LBM_analysis_new_files", device = "pdf")
print(g)
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png'), out.width = '100%', out.height='40%')
library(tidyverse)
library(magrittr)
library(ggplot2)
library(vegan)
library(igraph)
library(reshape2)
library(infomapecology)
library(aricode)
rm(list=ls())
# reading ASV data
data_asv <- read_csv("data_processed/three_villages/data_asv_0.01_grids2.csv")
data_asv %<>% filter((host_species == "Rattus rattus" | host_species == "Microgale brevicaudata") & village == "Mandena") %>%
mutate(grid = factor(grid, levels = c("semi-intact_forest","secondary_forest","brushy_regrowth","agriculture","flooded_rice","agroforest","village")))
n_asv <- data_asv %>%
count(asv_ID) %>%
filter(n<3)
#
#data_asv %<>% filter(asv_ID %in% n_asv$asv_ID)
#data_asv_mat <- data_asv %>%
#  spread(asv_ID, reads, fill = 0) %>%
#  mutate(across(starts_with("ASV"), ~.*unfiltered_reads)) %>%
#  mutate(total_reads = select(.,starts_with("ASV")) %>% rowSums(na.rm = TRUE)) %>%
#  mutate(across(starts_with("ASV"), ~./total_reads)) %>%
#  gather("asv_ID", "reads", starts_with("ASV")) %>%
#  filter(reads>0)
#data_mammals <- read_csv("data_raw/Terrestrial_Mammals.csv")
#data_mammals %<>% mutate(host_ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", animal_id))) %>%
#  mutate(dist_village = as.numeric(gsub(".*?([0-9,.]+).*", "\\1", dist_village_center))) %>%
#  select(host_ID, dist_village)
#full_grids <- read_csv("data_processed/three_villages/data_SM.csv") %>% dplyr::select(host_ID, grid) %>%
#  left_join(data_mammals, by="host_ID")
#data_asv %<>% dplyr::select(-grid) %>%left_join(full_grids, by="host_ID") %>%
#  mutate(dist_village = ifelse(grid=="village",0,dist_village))
#write_csv(data_asv_mat, "data_processed/three_villages/data_asv_0.01_grids2.csv")
# distance between grids
grid_dist_avg <- data_asv %>%
distinct(host_ID, grid, dist_village) %>%
group_by(grid) %>%
summarise(distance = mean(dist_village))
data_asv_mat <- data_asv %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
s="Rattus rattus"
data_asv_s <- data_asv %>% filter(host_species==s)
data_asv_mat <- data_asv_s %>%
mutate(reads = 1) %>%
spread(asv_ID, reads, fill = 0) %>%
column_to_rownames("host_ID") %>%
dplyr::select(starts_with("ASV")) %>%
as.matrix()
# building the network
network_object <- infomapecology::create_monolayer_object(data_asv_mat, directed = FALSE, bipartite = TRUE, group_names = c("ASV", "Host"))
# modularity analysis
infomap_object <- run_infomap_monolayer(network_object,
infomap_executable='Infomap',
flow_model = 'undirected',
two_level = TRUE,
silent=TRUE, trials=100, seed=123)
# adding the modules classification to the data
modules_asv <- infomap_object$modules %>% filter(node_group == "ASV")%>% dplyr::rename(asv_group = module_level1, asv_ID = node_name)
modules_host <- infomap_object$modules %>% filter(node_group == "Host")%>% dplyr::rename(host_group = module_level1, host_ID = node_name) %>% mutate(host_ID = as.numeric(host_ID))
data_asv_s %<>% left_join(modules_asv %>% dplyr::select(asv_ID,asv_group), by = "asv_ID") %>%
left_join(modules_host %>% dplyr::select(host_ID,host_group), by = "host_ID")
View(data_asv_s)
View(modules_asv)
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n= n_distinct(grid))
View(n_module_grid)
n_asv <- data_asv_s %>%
count(asv_ID)
View(n_asv)
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_module_grid <- data_asv_s %>%
group_by(host_group) %>%
summarise(n_grid = n_distinct(grid))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group"))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,.))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n>=10,10,n))
n_asv %>%
ggplot(aes(x=as.factor(n), y=n_grid, fill=as.factor(n))) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="Host Species", y="Microbiome Similarity [Jaccard]")
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = as.factor(n, levels = c("1-4","5-9","10+")))
n_asv <- data_asv_s %>%
count(asv_ID) %>%
left_join(modules_asv %>% dplyr::select(asv_ID, asv_group), by="asv_ID") %>%
left_join(n_module_grid, by = c("asv_group"="host_group")) %>%
mutate(n = ifelse(n<5,"1-4", ifelse(n>=10,"10+", "5-9"))) %>%
mutate(n = factor(n, levels = c("1-4","5-9","10+")))
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 10, color = 'black'), title = element_text(size = 14)) +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="No. of Land Uses")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Occurrence", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
n_asv %>%
ggplot(aes(x=n, y=n_grid, fill=n)) +
geom_boxplot() +
theme_bw() +
theme(axis.text = element_text(size = 14, color = 'black'), title = element_text(size = 20), legend.position = "none") +
labs(x="ASVs Degree", y="Modules' No. of Land Uses")
ggsave("n_grids_modules.pdf", path = "grid_modularity_files", device = "pdf")
knitr::opts_chunk$set(echo = FALSE, results = "asis", message=FALSE, warning=FALSE, cache=TRUE, eval = TRUE, dev = c('png','pdf'), out.width = '100%', out.height='40%')
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
library(tidyverse)
library(magrittr)
data_asv <- read_csv("data_raw/merged_full_sample_table.csv")
View(data_asv)
setwd("~/GitHub/Microbiome_Structure_Madagascar")
library(ape)
library(adegenet)
library(phangorn)
#BiocManager::install("msa")
library(msa)
# reading the full dna sequences (fasta file)
seq_fa <- read.FASTA(file="data/data_raw/data_microbiome/ASV_merged_full.fa")
# filtering out ASVs by relative abundance of 1%
data_asv_filtered <- read_csv("data/data_processed/microbiome/data_asv_rra0.01_th1000.csv")
#------ includes ------------
library(tidyverse)
library(magrittr)
library(ape)
# filtering out ASVs by relative abundance of 1%
data_asv_filtered <- read_csv("data/data_processed/microbiome/data_asv_rra0.01_th1000.csv")
# filtering out ASVs by relative abundance of 1%
data_asv_filtered <- read_csv("data/data_processed/microbiome/data_asv_rra0.01_th1000.csv") %>%
filter(host_species == "Rattus rattus")
View(data_asv_filtered)
asv_names <- tibble(asv_ID = unique(data_asv_filtered$asv_ID))
asv_names %<>% mutate(ID = as.numeric(gsub(".*?([0-9]+).*", "\\1", asv_ID))) %>% arrange(ID)
View(asv_names)
seq_fa2 <- seq_fa[names(seq_fa) %in% asv_names$asv_ID]
names(seq_fa2) <- asv_names$asv_ID
View(seq_fa2)
write.FASTA(seq_fa2, file = "data/data_raw/data_microbiome/ASV_merged_full_0.01.fa")
# align the sequences
seq_aligned <- msa::msaClustalOmega("data/data_raw/data_microbiome/ASV_merged_full_0.01.fa", type="dna",
auto=F,
cluster=100,
dealign=F,
order="input",
useKimura=T)
seq_aligned2 <- as.DNAbin(seq_aligned)
rownames(seq_aligned2) <- asv_names$asv_ID
dnaphydatAll <- phyDat(seq_aligned2, type="DNA", levels=NULL)
?modelTest
mt2 <- modelTest(dnaphydatAll,
model="all", multicore = T, mc.cores=2)
View(mt2)
# optimize the tree
# the function takes the best model (according to BIC) and optimizes the parameters
best_tree <- pml_bb(mt2)
saveRDS(best_tree, file = "results/phylo_tree_0.01.rds")
# plot the tree
phylo_tree <- best_tree$tree
class
class(phylo_tree)
# data_asv <- read_csv("../data/data_processed/microbiome/data_asv_rra0.01_th1000.csv") %>%
filter(host_species == "Rattus rattus" & grid!="village" & village == "Mandena")
# data_asv <- read_csv("data/data_processed/microbiome/data_asv_rra0.01_th1000.csv") %>%
filter(host_species == "Rattus rattus" & grid!="village" & village == "Mandena")
data_asv <- read_csv("data/data_processed/microbiome/data_asv_rra0.01_th1000.csv") %>%
filter(host_species == "Rattus rattus" & grid!="village" & village == "Mandena")
View(data_asv)
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(asv_ID) %>%
summarise(reads = mean(reads))
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(grid, asv_ID) %>%
summarise(reads = mean(reads))
View(data_betaNTI)
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(grid, asv_ID) %>%
summarise(reads = mean(reads)) %>%
mutate(abundance = 1) %>%
dplyr::select(grid, abundance, asv_ID)
head(data_betaNTI)
install.packages("phylocomr")
library(phylocomr)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(grid, asv_ID) %>%
summarise(reads = mean(reads)) %>%
mutate(abundance = 1) %>%
mutate(asv_ID = as.character(asv_ID)) %>%
dplyr::select(grid, abundance, asv_ID)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
class(data_betaNTI)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(as.data.frame(data_betaNTI), phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
?is.rooted.phylo
is.rooted.phylo(phylo_tree)
phylo_tree$tip.label <- tolower(phylo_tree$tip.label)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(as.data.frame(data_betaNTI), phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(grid, asv_ID) %>%
summarise(reads = mean(reads)) %>%
mutate(abundance = 1) %>%
dplyr::select(grid, abundance, asv_ID) %>%
as.data.frame()
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree)
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(grid, asv_ID) %>%
summarise(reads = mean(reads)) %>%
mutate(abundance = 1) %>%
mutate(asv_ID = tolower(asv_ID)) %>%
dplyr::select(grid, abundance, asv_ID) %>%
as.data.frame()
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
sfile <- system.file("examples/sample_comstruct", package = "phylocomr")
sample_str <- paste0(readLines(sfile), collapse = "\n")
sfile2 <- tempfile()
sfile
sampledf <- read.table(sfile, header = FALSE,
stringsAsFactors = FALSE)
View(sampledf)
phylo_tree_rooted <- root(phylo_tree)
?gsub
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(grid, asv_ID) %>%
summarise(reads = mean(reads)) %>%
mutate(abundance = 1) %>%
mutate(asv_ID = gsub('_','', asv_ID)) %>%
dplyr::select(grid, abundance, asv_ID) %>%
as.data.frame()
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(grid, asv_ID) %>%
summarise(reads = mean(reads)) %>%
mutate(abundance = 1) %>%
mutate(asv_ID = gsub('_','', asv_ID)) %>%
mutate(asv_ID = tolower(asv_ID)) %>%
dplyr::select(grid, abundance, asv_ID) %>%
as.data.frame()
phylo_tree$tip.label <- gsub('_','', phylo_tree$tip.label)
?phylo
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
phylo_tree_rooted <- root(phylo_tree, 1)
phylo_tree <- best_tree$tree
phylo_tree$tip.label <- tolower(phylo_tree$tip.label)
phylo_tree_rooted <- root(phylo_tree, 1)
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(grid, asv_ID) %>%
summarise(reads = mean(reads)) %>%
mutate(abundance = 1) %>%
#mutate(asv_ID = gsub('_','', asv_ID)) %>%
mutate(asv_ID = tolower(asv_ID)) %>%
dplyr::select(grid, abundance, asv_ID) %>%
as.data.frame()
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
is.rooted(phylo_tree_rooted)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree_rooted, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
phylo_tree_rooted <- root(phylo_tree, "asv_1")
is.rooted(phylo_tree_rooted)
phylo_tree_rooted <- root(phylo_tree, "asv_1")
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree_rooted, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree_rooted, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
phylo_tree_rooted <- root(phylo_tree, 1)
is.rooted.phylo(phylo_tree_rooted)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree_rooted, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
?readDNAStringSet
# align the sequences
seq_aligned <- readDNAStringSet("data/data_raw/data_microbiome/ASV_merged_full_0.01.fa")
seq_aligned2 <- as.DNAbin(seq_aligned)
rownames(seq_aligned2) <- asv_names$asv_ID
View(asv_names)
dnaphydatAll <- phyDat(seq_aligned2, type="DNA", levels=NULL)
?modelTest
dnaphydatAll <- phyDat(seq_aligned, type="DNA", levels=NULL)
?phyDat
?phylo
phylo_tree$edge.length
dd <- dist.dna(phylo_tree)
dd <- dist.dna(phylo_tree, , model="TN93")
seq_aligned2 <- as.DNAbin(seq_aligned)
dnaphydatAll <- phyDat(seq_aligned2, type="DNA", levels=NULL)
dd <- dist.dna(phylo_tree, model="TN93")
aligned <- DECIPHER::AlignSeqs(seq_aligned)
seq_aligned2 <- as.DNAbin(aligned)
dnaphydatAll <- phyDat(seq_aligned2, type="DNA", levels=NULL)
mt2 <- modelTest(dnaphydatAll,
model="all", multicore = T, mc.cores=2)
# optimize the tree
# the function takes the best model (according to BIC) and optimizes the parameters
best_tree <- pml_bb(mt2)
saveRDS(best_tree, file = "results/phylo_tree_0.01_2.rds")
# reading the phylogenetic tree
best_tree <- readRDS(file = "results/phylo_tree_0.01_2.rds")
phylo_tree <- best_tree$tree
phylo_tree$tip.label <- tolower(phylo_tree$tip.label)
# reading the microbiome data
data_asv <- read_csv("data/data_processed/microbiome/data_asv_rra0.01_th1000.csv") %>%
filter(host_species == "Rattus rattus" & grid!="village" & village == "Mandena")
# preparing the input table for the beta-NTI function
data_betaNTI <- data_asv %>%
group_by(grid, asv_ID) %>%
summarise(reads = mean(reads)) %>%
mutate(abundance = 1) %>%
#mutate(asv_ID = gsub('_','', asv_ID)) %>%
mutate(asv_ID = tolower(asv_ID)) %>%
dplyr::select(grid, abundance, asv_ID) %>%
as.data.frame()
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree_rooted, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
phylo_tree_rooted <- root(phylo_tree, 1)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree_rooted, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree_rooted)
pfile <- system.file("examples/phylo_comstruct", package = "phylocomr")
phylo_str <- readLines(pfile)
phylo_str
a=write.tree(phylo_tree)
a
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, a, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
class(phylo_tree$edge.length)
phylo_tree$edge.length <- as.integer(phylo_tree$edge.length)
phylo_tree <- best_tree$tree
phylo_tree$tip.label <- tolower(phylo_tree$tip.label)
phylo_tree$edge.length <- as.double(phylo_tree$edge.length)
phylo_tree$edge.length[2]
options(scipen = 999)
phylo_tree <- best_tree$tree
phylo_tree$tip.label <- tolower(phylo_tree$tip.label)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdist(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
phylo_tree_rooted <- root(phylo_tree, 1)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree_rooted, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
phylo_tree$node.label
?phylo
a=phylo_tree$edge
View(a)
length(phylo_tree$node.label)
phylo_tree$node.label <- 1:length(phylo_tree$node.label)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
phylo_tree_rooted <- root(phylo_tree, 1)
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, phylo_tree_rooted, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
a=write.tree(phylo_tree)
a
# calculating betaNTI between grids
betaNTI_resutlts <- phylocomr::ph_comdistnt(data_betaNTI, a, rand_test = TRUE, null_model = 1, randomizations = 999, abundance = FALSE)
